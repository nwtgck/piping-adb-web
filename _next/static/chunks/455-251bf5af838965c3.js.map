{"version":3,"file":"static/chunks/455-251bf5af838965c3.js","mappings":"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","sources":["webpack://_N_E/../../common/temp/node_modules/.pnpm/@fluentui+react@8.81.1_cktacisfg2p5lpuckvtl5f276a/node_modules/@fluentui/react/lib/components/src/components/TextField/TextField.base.tsx","webpack://_N_E/../../common/temp/node_modules/.pnpm/@fluentui+utilities@8.9.0_wcklpcar7sgs6afjb4j5aji7wy/node_modules/@fluentui/utilities/src/ie11Detector.ts","webpack://_N_E/../../common/temp/node_modules/.pnpm/@fluentui+utilities@8.9.0_wcklpcar7sgs6afjb4j5aji7wy/node_modules/@fluentui/utilities/src/controlled.ts","webpack://_N_E/../../common/temp/node_modules/.pnpm/@fluentui+react@8.81.1_cktacisfg2p5lpuckvtl5f276a/node_modules/@fluentui/react/lib/components/src/components/TextField/TextField.styles.tsx","webpack://_N_E/../../common/temp/node_modules/.pnpm/@fluentui+react@8.81.1_cktacisfg2p5lpuckvtl5f276a/node_modules/@fluentui/react/lib/components/src/components/TextField/TextField.ts","webpack://_N_E/../../common/temp/node_modules/.pnpm/@fluentui+utilities@8.9.0_wcklpcar7sgs6afjb4j5aji7wy/node_modules/@fluentui/utilities/src/DelayedRender.tsx","webpack://_N_E/../../common/temp/node_modules/.pnpm/@swc+helpers@0.4.2/node_modules/@swc/helpers/src/_create_class.mjs"],"sourcesContent":["import * as React from 'react';\nimport { Label } from '../../Label';\nimport { Icon } from '../../Icon';\nimport {\n  Async,\n  classNamesFunction,\n  DelayedRender,\n  getId,\n  getNativeProps,\n  getWindow,\n  initializeComponentRef,\n  inputProperties,\n  isControlled,\n  isIE11,\n  textAreaProperties,\n  warn,\n  warnControlledUsage,\n  warnMutuallyExclusive,\n} from '../../Utilities';\nimport type { IProcessedStyleSet } from '../../Styling';\nimport type { ILabelStyleProps, ILabelStyles } from '../../Label';\nimport type { IStyleFunctionOrObject } from '../../Utilities';\nimport type { ITextField, ITextFieldProps, ITextFieldStyleProps, ITextFieldStyles } from './TextField.types';\n\nconst getClassNames = classNamesFunction<ITextFieldStyleProps, ITextFieldStyles>();\n\n/** @internal */\nexport interface ITextFieldState {\n  /** The currently displayed value if uncontrolled. */\n  uncontrolledValue: string | undefined;\n\n  /** Is true when the control has focus. */\n  isFocused?: boolean;\n\n  /**\n   * Dynamic error message returned by `onGetErrorMessage`.\n   * Use `this._errorMessage` to get the actual current error message.\n   */\n  errorMessage: string | JSX.Element;\n\n  /**\n   * Whether this field has `type='password'` and `canRevealPassword=true`, and the password is\n   * currently being revealed.\n   */\n  isRevealingPassword?: boolean;\n}\n\n/** @internal */\nexport interface ITextFieldSnapshot {\n  /**\n   * If set, the text field is changing between single- and multi-line, so we'll need to reset\n   * selection/cursor after the change completes.\n   */\n  selection?: [number | null, number | null];\n}\n\nconst DEFAULT_STATE_VALUE = '';\nconst COMPONENT_NAME = 'TextField';\n\nconst REVEAL_ICON_NAME = 'RedEye';\nconst HIDE_ICON_NAME = 'Hide';\n\nexport class TextFieldBase\n  extends React.Component<ITextFieldProps, ITextFieldState, ITextFieldSnapshot>\n  implements ITextField {\n  public static defaultProps: ITextFieldProps = {\n    resizable: true,\n    deferredValidationTime: 200,\n    validateOnLoad: true,\n  };\n\n  /** Fallback ID if none is provided in props. Access proper value via `this._id`. */\n  private _fallbackId: string;\n  private _descriptionId: string;\n  private _labelId: string;\n  private _prefixId: string;\n  private _suffixId: string;\n  private _delayedValidate: (value: string | undefined) => void;\n  private _lastValidation: number;\n  private _latestValidateValue: string | undefined;\n  private _hasWarnedNullValue: boolean | undefined;\n  private _textElement = React.createRef<HTMLTextAreaElement | HTMLInputElement>();\n  private _classNames: IProcessedStyleSet<ITextFieldStyles>;\n  private _async: Async;\n  /** Most recent value from a change or input event, to help avoid processing events twice */\n  private _lastChangeValue: string | undefined;\n\n  public constructor(props: ITextFieldProps) {\n    super(props);\n\n    initializeComponentRef(this);\n    this._async = new Async(this);\n\n    if (process.env.NODE_ENV !== 'production') {\n      warnMutuallyExclusive(COMPONENT_NAME, props, {\n        errorMessage: 'onGetErrorMessage',\n      });\n    }\n\n    this._fallbackId = getId(COMPONENT_NAME);\n    this._descriptionId = getId(COMPONENT_NAME + 'Description');\n    this._labelId = getId(COMPONENT_NAME + 'Label');\n    this._prefixId = getId(COMPONENT_NAME + 'Prefix');\n    this._suffixId = getId(COMPONENT_NAME + 'Suffix');\n\n    this._warnControlledUsage();\n\n    let { defaultValue = DEFAULT_STATE_VALUE } = props;\n    if (typeof defaultValue === 'number') {\n      // This isn't allowed per the props, but happens anyway.\n      defaultValue = String(defaultValue);\n    }\n    this.state = {\n      uncontrolledValue: this._isControlled ? undefined : defaultValue,\n      isFocused: false,\n      errorMessage: '',\n    };\n\n    this._delayedValidate = this._async.debounce(this._validate, this.props.deferredValidationTime);\n    this._lastValidation = 0;\n  }\n\n  /**\n   * Gets the current value of the text field.\n   */\n  public get value(): string | undefined {\n    return _getValue(this.props, this.state);\n  }\n\n  public componentDidMount(): void {\n    this._adjustInputHeight();\n\n    if (this.props.validateOnLoad) {\n      this._validate(this.value);\n    }\n  }\n\n  public componentWillUnmount() {\n    this._async.dispose();\n  }\n\n  public getSnapshotBeforeUpdate(prevProps: ITextFieldProps, prevState: ITextFieldState): ITextFieldSnapshot | null {\n    return {\n      selection: [this.selectionStart, this.selectionEnd],\n    };\n  }\n\n  public componentDidUpdate(\n    prevProps: ITextFieldProps,\n    prevState: ITextFieldState,\n    snapshot: ITextFieldSnapshot,\n  ): void {\n    const props = this.props;\n    const { selection = [null, null] } = snapshot || {};\n    const [start, end] = selection;\n\n    if (!!prevProps.multiline !== !!props.multiline && prevState.isFocused) {\n      // The text field has just changed between single- and multi-line, so we need to reset focus\n      // and selection/cursor.\n      this.focus();\n      if (start !== null && end !== null && start >= 0 && end >= 0) {\n        this.setSelectionRange(start, end);\n      }\n    }\n\n    if (prevProps.value !== props.value) {\n      // Only if the value in props changed, reset the record of the last value seen by a\n      // change/input event (don't do this if the value in state changed, since at least in tests\n      // the state update may happen before the second event in a series)\n      this._lastChangeValue = undefined;\n    }\n\n    const prevValue = _getValue(prevProps, prevState);\n    const value = this.value;\n    if (prevValue !== value) {\n      // Handle controlled/uncontrolled warnings and status\n      this._warnControlledUsage(prevProps);\n\n      // Clear error message if needed\n      // TODO: is there any way to do this without an extra render?\n      if (this.state.errorMessage && !props.errorMessage) {\n        this.setState({ errorMessage: '' });\n      }\n\n      // Adjust height if needed based on new value\n      this._adjustInputHeight();\n\n      // TODO: #5875 added logic to trigger validation in componentWillReceiveProps and other places.\n      // This seems a bit odd and hard to integrate with the new approach.\n      // (Starting to think we should just put the validation logic in a separate wrapper component...?)\n      if (_shouldValidateAllChanges(props)) {\n        this._delayedValidate(value);\n      }\n    }\n  }\n\n  public render(): JSX.Element {\n    const {\n      borderless,\n      className,\n      disabled,\n      invalid,\n      iconProps,\n      inputClassName,\n      label,\n      multiline,\n      required,\n      underlined,\n      prefix,\n      resizable,\n      suffix,\n      theme,\n      styles,\n      autoAdjustHeight,\n      canRevealPassword,\n      revealPasswordAriaLabel,\n      type,\n      onRenderPrefix = this._onRenderPrefix,\n      onRenderSuffix = this._onRenderSuffix,\n      onRenderLabel = this._onRenderLabel,\n      onRenderDescription = this._onRenderDescription,\n    } = this.props;\n    const { isFocused, isRevealingPassword } = this.state;\n    const errorMessage = this._errorMessage;\n    const isInvalid = typeof invalid === 'boolean' ? invalid : !!errorMessage;\n\n    const hasRevealButton = !!canRevealPassword && type === 'password' && _browserNeedsRevealButton();\n\n    const classNames = (this._classNames = getClassNames(styles!, {\n      theme: theme!,\n      className,\n      disabled,\n      focused: isFocused,\n      required,\n      multiline,\n      hasLabel: !!label,\n      hasErrorMessage: isInvalid,\n      borderless,\n      resizable,\n      hasIcon: !!iconProps,\n      underlined,\n      inputClassName,\n      autoAdjustHeight,\n      hasRevealButton,\n    }));\n\n    return (\n      // eslint-disable-next-line deprecation/deprecation\n      <div ref={this.props.elementRef} className={classNames.root}>\n        <div className={classNames.wrapper}>\n          {onRenderLabel(this.props, this._onRenderLabel)}\n          <div className={classNames.fieldGroup}>\n            {(prefix !== undefined || this.props.onRenderPrefix) && (\n              <div className={classNames.prefix} id={this._prefixId}>\n                {onRenderPrefix(this.props, this._onRenderPrefix)}\n              </div>\n            )}\n            {multiline ? this._renderTextArea() : this._renderInput()}\n            {iconProps && <Icon className={classNames.icon} {...iconProps} />}\n            {hasRevealButton && (\n              // Explicitly set type=\"button\" since the default button type within a form is \"submit\"\n              <button\n                aria-label={revealPasswordAriaLabel}\n                className={classNames.revealButton}\n                onClick={this._onRevealButtonClick}\n                aria-pressed={!!isRevealingPassword}\n                type=\"button\"\n              >\n                <span className={classNames.revealSpan}>\n                  <Icon\n                    className={classNames.revealIcon}\n                    iconName={isRevealingPassword ? HIDE_ICON_NAME : REVEAL_ICON_NAME}\n                  />\n                </span>\n              </button>\n            )}\n            {(suffix !== undefined || this.props.onRenderSuffix) && (\n              <div className={classNames.suffix} id={this._suffixId}>\n                {onRenderSuffix(this.props, this._onRenderSuffix)}\n              </div>\n            )}\n          </div>\n        </div>\n        {this._isDescriptionAvailable && (\n          <span id={this._descriptionId}>\n            {onRenderDescription(this.props, this._onRenderDescription)}\n            {errorMessage && (\n              <div role=\"alert\">\n                <DelayedRender>{this._renderErrorMessage()}</DelayedRender>\n              </div>\n            )}\n          </span>\n        )}\n      </div>\n    );\n  }\n\n  /**\n   * Sets focus on the text field\n   */\n  public focus() {\n    if (this._textElement.current) {\n      this._textElement.current.focus();\n    }\n  }\n\n  /**\n   * Blurs the text field.\n   */\n  public blur() {\n    if (this._textElement.current) {\n      this._textElement.current.blur();\n    }\n  }\n\n  /**\n   * Selects the text field\n   */\n  public select() {\n    if (this._textElement.current) {\n      this._textElement.current.select();\n    }\n  }\n\n  /**\n   * Sets the selection start of the text field to a specified value\n   */\n  public setSelectionStart(value: number): void {\n    if (this._textElement.current) {\n      this._textElement.current.selectionStart = value;\n    }\n  }\n\n  /**\n   * Sets the selection end of the text field to a specified value\n   */\n  public setSelectionEnd(value: number): void {\n    if (this._textElement.current) {\n      this._textElement.current.selectionEnd = value;\n    }\n  }\n\n  /**\n   * Gets the selection start of the text field\n   */\n  public get selectionStart(): number | null {\n    return this._textElement.current ? this._textElement.current.selectionStart : -1;\n  }\n\n  /**\n   * Gets the selection end of the text field\n   */\n  public get selectionEnd(): number | null {\n    return this._textElement.current ? this._textElement.current.selectionEnd : -1;\n  }\n\n  /**\n   * Sets the start and end positions of a selection in a text field.\n   * @param start - Index of the start of the selection.\n   * @param end - Index of the end of the selection.\n   */\n  public setSelectionRange(start: number, end: number): void {\n    if (this._textElement.current) {\n      (this._textElement.current as HTMLInputElement).setSelectionRange(start, end);\n    }\n  }\n\n  private _warnControlledUsage(prevProps?: ITextFieldProps): void {\n    // Show warnings if props are being used in an invalid way\n    warnControlledUsage({\n      componentId: this._id,\n      componentName: COMPONENT_NAME,\n      props: this.props,\n      oldProps: prevProps,\n      valueProp: 'value',\n      defaultValueProp: 'defaultValue',\n      onChangeProp: 'onChange',\n      readOnlyProp: 'readOnly',\n    });\n\n    if (this.props.value === null && !this._hasWarnedNullValue) {\n      this._hasWarnedNullValue = true;\n      warn(\n        `Warning: 'value' prop on '${COMPONENT_NAME}' should not be null. Consider using an ` +\n          'empty string to clear the component or undefined to indicate an uncontrolled component.',\n      );\n    }\n  }\n\n  /** Returns `props.id` if available, or a fallback if not. */\n  private get _id(): string {\n    return this.props.id || this._fallbackId;\n  }\n\n  private get _isControlled(): boolean {\n    return isControlled(this.props, 'value');\n  }\n\n  private _onFocus = (ev: React.FocusEvent<HTMLInputElement | HTMLTextAreaElement>): void => {\n    if (this.props.onFocus) {\n      this.props.onFocus(ev);\n    }\n\n    this.setState({ isFocused: true }, () => {\n      if (this.props.validateOnFocusIn) {\n        this._validate(this.value);\n      }\n    });\n  };\n\n  private _onBlur = (ev: React.FocusEvent<HTMLInputElement | HTMLTextAreaElement>): void => {\n    if (this.props.onBlur) {\n      this.props.onBlur(ev);\n    }\n\n    this.setState({ isFocused: false }, () => {\n      if (this.props.validateOnFocusOut) {\n        this._validate(this.value);\n      }\n    });\n  };\n\n  private _onRenderLabel = (props: ITextFieldProps): JSX.Element | null => {\n    const { label, required } = props;\n    // IProcessedStyleSet definition requires casting for what Label expects as its styles prop\n    const labelStyles = this._classNames.subComponentStyles\n      ? (this._classNames.subComponentStyles.label as IStyleFunctionOrObject<ILabelStyleProps, ILabelStyles>)\n      : undefined;\n\n    if (label) {\n      return (\n        <Label required={required} htmlFor={this._id} styles={labelStyles} disabled={props.disabled} id={this._labelId}>\n          {props.label}\n        </Label>\n      );\n    }\n    return null;\n  };\n\n  private _onRenderDescription = (props: ITextFieldProps): JSX.Element | null => {\n    if (props.description) {\n      return <span className={this._classNames.description}>{props.description}</span>;\n    }\n    return null;\n  };\n\n  private _onRenderPrefix(props: ITextFieldProps): JSX.Element {\n    const { prefix } = props;\n    return <span style={{ paddingBottom: '1px' }}>{prefix}</span>;\n  }\n\n  private _onRenderSuffix(props: ITextFieldProps): JSX.Element {\n    const { suffix } = props;\n    return <span style={{ paddingBottom: '1px' }}>{suffix}</span>;\n  }\n\n  /**\n   * Current error message from either `props.errorMessage` or the result of `props.onGetErrorMessage`.\n   *\n   * - If there is no validation error or we have not validated the input value, errorMessage is an empty string.\n   * - If we have done the validation and there is validation error, errorMessage is the validation error message.\n   */\n  private get _errorMessage(): string | JSX.Element {\n    const { errorMessage = this.state.errorMessage } = this.props;\n    return errorMessage || '';\n  }\n\n  /**\n   * Renders error message based on the type of the message.\n   *\n   * - If error message is string, it will render using the built in styles.\n   * - If error message is an element, user has full control over how it's rendered.\n   */\n  private _renderErrorMessage(): JSX.Element | null {\n    const errorMessage = this._errorMessage;\n\n    return errorMessage ? (\n      typeof errorMessage === 'string' ? (\n        <p className={this._classNames.errorMessage}>\n          <span data-automation-id=\"error-message\">{errorMessage}</span>\n        </p>\n      ) : (\n        <div className={this._classNames.errorMessage} data-automation-id=\"error-message\">\n          {errorMessage}\n        </div>\n      )\n    ) : null;\n  }\n\n  /**\n   * If a custom description render function is supplied then treat description as always available.\n   * Otherwise defer to the presence of description or error message text.\n   */\n  private get _isDescriptionAvailable(): boolean {\n    const props = this.props;\n    return !!(props.onRenderDescription || props.description || this._errorMessage);\n  }\n\n  private _renderTextArea(): React.ReactElement<React.HTMLAttributes<HTMLAreaElement>> {\n    const { invalid = !!this._errorMessage } = this.props;\n    const textAreaProps = getNativeProps<React.TextareaHTMLAttributes<HTMLTextAreaElement>>(\n      this.props,\n      textAreaProperties,\n      ['defaultValue'],\n    );\n    const ariaLabelledBy = this.props['aria-labelledby'] || (this.props.label ? this._labelId : undefined);\n    return (\n      <textarea\n        id={this._id}\n        {...textAreaProps}\n        ref={this._textElement as React.RefObject<HTMLTextAreaElement>}\n        value={this.value || ''}\n        onInput={this._onInputChange}\n        onChange={this._onInputChange}\n        className={this._classNames.field}\n        aria-labelledby={ariaLabelledBy}\n        aria-describedby={this._isDescriptionAvailable ? this._descriptionId : this.props['aria-describedby']}\n        aria-invalid={invalid}\n        aria-label={this.props.ariaLabel}\n        readOnly={this.props.readOnly}\n        onFocus={this._onFocus}\n        onBlur={this._onBlur}\n      />\n    );\n  }\n\n  private _renderInput(): JSX.Element | null {\n    const {\n      ariaLabel,\n      invalid = !!this._errorMessage,\n      onRenderPrefix,\n      onRenderSuffix,\n      prefix,\n      suffix,\n      type = 'text',\n      label,\n    } = this.props;\n\n    // build aria-labelledby list from label, prefix, and suffix\n    const labelIds = [];\n    label && labelIds.push(this._labelId);\n    (prefix !== undefined || onRenderPrefix) && labelIds.push(this._prefixId);\n    (suffix !== undefined || onRenderSuffix) && labelIds.push(this._suffixId);\n\n    const inputProps: React.InputHTMLAttributes<HTMLInputElement> & React.RefAttributes<HTMLInputElement> = {\n      type: this.state.isRevealingPassword ? 'text' : type,\n      id: this._id,\n      ...getNativeProps(this.props, inputProperties, ['defaultValue', 'type']),\n      'aria-labelledby': this.props['aria-labelledby'] || (labelIds.length > 0 ? labelIds.join(' ') : undefined),\n      ref: this._textElement as React.RefObject<HTMLInputElement>,\n      value: this.value || '',\n      onInput: this._onInputChange,\n      onChange: this._onInputChange,\n      className: this._classNames.field,\n      'aria-label': ariaLabel,\n      'aria-describedby': this._isDescriptionAvailable ? this._descriptionId : this.props['aria-describedby'],\n      'aria-invalid': invalid,\n      onFocus: this._onFocus,\n      onBlur: this._onBlur,\n    };\n\n    const defaultRender = (updatedInputProps: React.InputHTMLAttributes<HTMLInputElement>) => {\n      return <input {...updatedInputProps} />;\n    };\n    const onRenderInput = this.props.onRenderInput || defaultRender;\n    return onRenderInput(inputProps, defaultRender);\n  }\n\n  private _onRevealButtonClick = (event: React.MouseEvent<HTMLButtonElement>): void => {\n    this.setState(prevState => ({ isRevealingPassword: !prevState.isRevealingPassword }));\n  };\n\n  private _onInputChange = (event: React.FormEvent<HTMLInputElement | HTMLTextAreaElement>): void => {\n    // Previously, we needed to call both onInput and onChange due to some weird IE/React issues,\n    // which have *probably* been fixed now:\n    // - https://github.com/microsoft/fluentui/issues/744 (likely fixed)\n    // - https://github.com/microsoft/fluentui/issues/824 (confirmed fixed)\n\n    // TODO (Fabric 8?) - Switch to calling only onChange. This switch is pretty disruptive for\n    // tests (ours and maybe consumers' too), so it seemed best to do the switch in a major bump.\n\n    const element = event.target as HTMLInputElement;\n    const value = element.value;\n    // Ignore this event if any of the following are true:\n    // - the value is undefined (in case one of the IE bugs comes back)\n    // - it's a duplicate event (important since onInputChange is called twice per actual user event)\n    // - it's the same as the previous value\n    const previousValue = _getValue(this.props, this.state) || '';\n    if (value === undefined || value === this._lastChangeValue || value === previousValue) {\n      this._lastChangeValue = undefined;\n      return;\n    }\n    this._lastChangeValue = value;\n\n    this.props.onChange?.(event, value);\n\n    if (!this._isControlled) {\n      // ONLY if this is an uncontrolled component, update the displayed value.\n      // (Controlled components must update the `value` prop from `onChange`.)\n      this.setState({ uncontrolledValue: value });\n    }\n  };\n\n  private _validate(value: string | undefined): void {\n    // In case _validate is called again while validation promise is executing\n    if (this._latestValidateValue === value && _shouldValidateAllChanges(this.props)) {\n      return;\n    }\n\n    this._latestValidateValue = value;\n    const onGetErrorMessage = this.props.onGetErrorMessage;\n    const result = onGetErrorMessage && onGetErrorMessage(value || '');\n\n    if (result !== undefined) {\n      if (typeof result === 'string' || !('then' in result)) {\n        this.setState({ errorMessage: result });\n        this._notifyAfterValidate(value, result);\n      } else {\n        const currentValidation: number = ++this._lastValidation;\n\n        result.then((errorMessage: string | JSX.Element) => {\n          if (currentValidation === this._lastValidation) {\n            this.setState({ errorMessage });\n          }\n          this._notifyAfterValidate(value, errorMessage);\n        });\n      }\n    } else {\n      this._notifyAfterValidate(value, '');\n    }\n  }\n\n  private _notifyAfterValidate(value: string | undefined, errorMessage: string | JSX.Element): void {\n    if (value === this.value && this.props.onNotifyValidationResult) {\n      this.props.onNotifyValidationResult(errorMessage, value);\n    }\n  }\n\n  private _adjustInputHeight(): void {\n    if (this._textElement.current && this.props.autoAdjustHeight && this.props.multiline) {\n      const textField = this._textElement.current;\n      textField.style.height = '';\n      textField.style.height = textField.scrollHeight + 'px';\n    }\n  }\n}\n\n/** Get the value from the given state and props (converting from number to string if needed) */\nfunction _getValue(props: ITextFieldProps, state: ITextFieldState): string | undefined {\n  const { value = state.uncontrolledValue } = props;\n  if (typeof value === 'number') {\n    // not allowed per typings, but happens anyway\n    return String(value);\n  }\n  return value;\n}\n\n/**\n * If `validateOnFocusIn` or `validateOnFocusOut` is true, validation should run **only** on that event.\n * Otherwise, validation should run on every change.\n */\nfunction _shouldValidateAllChanges(props: ITextFieldProps): boolean {\n  return !(props.validateOnFocusIn || props.validateOnFocusOut);\n}\n\n// Only calculate this once across all TextFields, since will stay the same\nlet __browserNeedsRevealButton: boolean | undefined;\n\nfunction _browserNeedsRevealButton() {\n  if (typeof __browserNeedsRevealButton !== 'boolean') {\n    const win = getWindow();\n\n    if (win?.navigator) {\n      // Edge, Chromium Edge\n      const isEdge = /^Edg/.test(win.navigator.userAgent || '');\n\n      __browserNeedsRevealButton = !(isIE11() || isEdge);\n    } else {\n      __browserNeedsRevealButton = true;\n    }\n  }\n  return __browserNeedsRevealButton;\n}\n","import { getWindow } from './dom/getWindow';\n\nexport const isIE11 = (): boolean => {\n  const win = getWindow();\n\n  if (!win?.navigator?.userAgent) {\n    return false;\n  }\n\n  return win.navigator.userAgent.indexOf('rv:11.0') > -1;\n};\n","/**\n * Determines whether a component is controlled.\n * @param props - Component props\n * @param valueProp - Prop containing the controlled value\n * @returns true if controlled, false if uncontrolled\n */\nexport function isControlled<P>(props: P, valueProp: keyof P): boolean {\n  // React's built-in <input> considers a prop to be provided if its value is non-null/undefined.\n  // Mirror that behavior here (rather than checking for just undefined).\n  return props[valueProp] !== undefined && props[valueProp] !== null;\n}\n","import {\n  AnimationClassNames,\n  getFocusStyle,\n  getGlobalClassNames,\n  getInputFocusStyle,\n  HighContrastSelector,\n  normalize,\n  getPlaceholderStyles,\n  IconFontSizes,\n  getHighContrastNoAdjustStyle,\n} from '../../Styling';\nimport type { IStyle } from '../../Styling';\nimport type { ILabelStyles, ILabelStyleProps } from '../../Label';\nimport type { ITextFieldStyleProps, ITextFieldStyles } from './TextField.types';\nimport type { IStyleFunctionOrObject } from '@fluentui/utilities';\n\nconst globalClassNames = {\n  root: 'ms-TextField',\n  description: 'ms-TextField-description',\n  errorMessage: 'ms-TextField-errorMessage',\n  field: 'ms-TextField-field',\n  fieldGroup: 'ms-TextField-fieldGroup',\n  prefix: 'ms-TextField-prefix',\n  suffix: 'ms-TextField-suffix',\n  wrapper: 'ms-TextField-wrapper',\n  revealButton: 'ms-TextField-reveal',\n\n  multiline: 'ms-TextField--multiline',\n  borderless: 'ms-TextField--borderless',\n  underlined: 'ms-TextField--underlined',\n  unresizable: 'ms-TextField--unresizable',\n\n  required: 'is-required',\n  disabled: 'is-disabled',\n  active: 'is-active',\n};\n\nfunction getLabelStyles(props: ITextFieldStyleProps): IStyleFunctionOrObject<ILabelStyleProps, ILabelStyles> {\n  const { underlined, disabled, focused, theme } = props;\n  const { palette, fonts } = theme;\n\n  return () => ({\n    root: [\n      underlined &&\n        disabled && {\n          color: palette.neutralTertiary,\n        },\n      underlined && {\n        fontSize: fonts.medium.fontSize,\n        marginRight: 8,\n        paddingLeft: 12,\n        paddingRight: 0,\n        lineHeight: '22px',\n        height: 32,\n      },\n      underlined &&\n        focused && {\n          selectors: {\n            [HighContrastSelector]: {\n              height: 31, // -1px to prevent jumpiness in HC with the increased border-width to 2px\n            },\n          },\n        },\n    ],\n  });\n}\n\nexport function getStyles(props: ITextFieldStyleProps): ITextFieldStyles {\n  const {\n    theme,\n    className,\n    disabled,\n    focused,\n    required,\n    multiline,\n    hasLabel,\n    borderless,\n    underlined,\n    hasIcon,\n    resizable,\n    hasErrorMessage,\n    inputClassName,\n    autoAdjustHeight,\n    hasRevealButton,\n  } = props;\n\n  const { semanticColors, effects, fonts } = theme;\n\n  const classNames = getGlobalClassNames(globalClassNames, theme);\n\n  const fieldPrefixSuffix: IStyle = {\n    // Suffix/Prefix are not editable so the disabled slot perfectly fits.\n    background: semanticColors.disabledBackground,\n    color: !disabled ? semanticColors.inputPlaceholderText : semanticColors.disabledText,\n    display: 'flex',\n    alignItems: 'center',\n    padding: '0 10px',\n    lineHeight: 1,\n    whiteSpace: 'nowrap',\n    flexShrink: 0,\n    selectors: {\n      [HighContrastSelector]: {\n        background: 'Window',\n        color: disabled ? 'GrayText' : 'WindowText',\n      },\n    },\n  };\n\n  // placeholder style constants\n  const placeholderStyles: IStyle = [\n    {\n      color: semanticColors.inputPlaceholderText,\n      opacity: 1,\n      selectors: {\n        [HighContrastSelector]: {\n          color: 'GrayText',\n        },\n      },\n    },\n  ];\n\n  const disabledPlaceholderStyles: IStyle = {\n    color: semanticColors.disabledText,\n    selectors: {\n      [HighContrastSelector]: {\n        color: 'GrayText',\n      },\n    },\n  };\n\n  return {\n    root: [\n      classNames.root,\n      fonts.medium,\n      required && classNames.required,\n      disabled && classNames.disabled,\n      focused && classNames.active,\n      multiline && classNames.multiline,\n      borderless && classNames.borderless,\n      underlined && classNames.underlined,\n      normalize,\n      {\n        position: 'relative',\n      },\n      className,\n    ],\n    wrapper: [\n      classNames.wrapper,\n\n      underlined && [\n        {\n          display: 'flex',\n          borderBottom: `1px solid ${!hasErrorMessage ? semanticColors.inputBorder : semanticColors.errorText}`,\n          width: '100%',\n        },\n        disabled && {\n          borderBottomColor: semanticColors.disabledBackground,\n          selectors: {\n            [HighContrastSelector]: {\n              borderColor: 'GrayText',\n              ...getHighContrastNoAdjustStyle(),\n            },\n          },\n        },\n        !disabled && {\n          selectors: {\n            ':hover': {\n              borderBottomColor: !hasErrorMessage ? semanticColors.inputBorderHovered : semanticColors.errorText,\n              selectors: {\n                [HighContrastSelector]: {\n                  borderBottomColor: 'Highlight',\n                  ...getHighContrastNoAdjustStyle(),\n                },\n              },\n            },\n          },\n        },\n        focused && [\n          {\n            position: 'relative',\n          },\n          getInputFocusStyle(\n            !hasErrorMessage ? semanticColors.inputFocusBorderAlt : semanticColors.errorText,\n            0,\n            'borderBottom',\n          ),\n        ],\n      ],\n    ],\n    fieldGroup: [\n      classNames.fieldGroup,\n      normalize,\n      {\n        border: `1px solid ${semanticColors.inputBorder}`,\n        borderRadius: effects.roundedCorner2,\n        background: semanticColors.inputBackground,\n        cursor: 'text',\n        height: 32,\n        display: 'flex',\n        flexDirection: 'row',\n        alignItems: 'stretch',\n        position: 'relative',\n      },\n      multiline && {\n        minHeight: '60px',\n        height: 'auto',\n        display: 'flex',\n      },\n\n      !focused &&\n        !disabled && {\n          selectors: {\n            ':hover': {\n              borderColor: semanticColors.inputBorderHovered,\n              selectors: {\n                [HighContrastSelector]: {\n                  borderColor: 'Highlight',\n                  ...getHighContrastNoAdjustStyle(),\n                },\n              },\n            },\n          },\n        },\n\n      focused &&\n        !underlined &&\n        getInputFocusStyle(\n          !hasErrorMessage ? semanticColors.inputFocusBorderAlt : semanticColors.errorText,\n          effects.roundedCorner2,\n        ),\n      disabled && {\n        borderColor: semanticColors.disabledBackground,\n        selectors: {\n          [HighContrastSelector]: {\n            borderColor: 'GrayText',\n            ...getHighContrastNoAdjustStyle(),\n          },\n        },\n\n        cursor: 'default',\n      },\n      borderless && {\n        border: 'none',\n      },\n      borderless &&\n        focused && {\n          border: 'none',\n          selectors: {\n            ':after': {\n              border: 'none',\n            },\n          },\n        },\n      underlined && {\n        flex: '1 1 0px',\n        border: 'none',\n        textAlign: 'left',\n      },\n      underlined &&\n        disabled && {\n          backgroundColor: 'transparent',\n        },\n\n      hasErrorMessage &&\n        !underlined && {\n          borderColor: semanticColors.errorText,\n          selectors: {\n            '&:hover': {\n              borderColor: semanticColors.errorText,\n            },\n          },\n        },\n      !hasLabel &&\n        required && {\n          selectors: {\n            ':before': {\n              content: `'*'`,\n              color: semanticColors.errorText,\n              position: 'absolute',\n              top: -5,\n              right: -10,\n            },\n            [HighContrastSelector]: {\n              selectors: {\n                ':before': {\n                  color: 'WindowText',\n                  right: -14, // moving the * 4 pixel to right to alleviate border clipping in HC mode.\n                },\n              },\n            },\n          },\n        },\n    ],\n    field: [\n      fonts.medium,\n      classNames.field,\n      normalize,\n      {\n        borderRadius: 0,\n        border: 'none',\n        background: 'none',\n        backgroundColor: 'transparent',\n        color: semanticColors.inputText,\n        padding: '0 8px',\n        width: '100%',\n        minWidth: 0,\n        textOverflow: 'ellipsis',\n        outline: 0,\n        selectors: {\n          '&:active, &:focus, &:hover': { outline: 0 },\n          '::-ms-clear': {\n            display: 'none',\n          },\n          [HighContrastSelector]: {\n            background: 'Window',\n            color: disabled ? 'GrayText' : 'WindowText',\n          },\n        },\n      },\n      getPlaceholderStyles(placeholderStyles),\n      multiline &&\n        !resizable && [\n          classNames.unresizable,\n          {\n            resize: 'none',\n          },\n        ],\n      multiline && {\n        minHeight: 'inherit',\n        lineHeight: 17,\n        flexGrow: 1,\n        paddingTop: 6,\n        paddingBottom: 6,\n        overflow: 'auto',\n        width: '100%',\n      },\n      multiline &&\n        autoAdjustHeight && {\n          overflow: 'hidden',\n        },\n      hasIcon &&\n        !hasRevealButton && {\n          paddingRight: 24,\n        },\n      multiline &&\n        hasIcon && {\n          paddingRight: 40,\n        },\n      disabled && [\n        {\n          backgroundColor: semanticColors.disabledBackground,\n          color: semanticColors.disabledText,\n          borderColor: semanticColors.disabledBackground,\n        },\n        getPlaceholderStyles(disabledPlaceholderStyles),\n      ],\n      underlined && {\n        textAlign: 'left',\n      },\n      focused &&\n        !borderless && {\n          selectors: {\n            [HighContrastSelector]: {\n              paddingLeft: 11,\n              paddingRight: 11,\n            },\n          },\n        },\n      focused &&\n        multiline &&\n        !borderless && {\n          selectors: {\n            [HighContrastSelector]: {\n              paddingTop: 4, // take into consideration the 2px increased border-width (not when borderless).\n            },\n          },\n        },\n      inputClassName,\n    ],\n    icon: [\n      multiline && {\n        paddingRight: 24,\n        alignItems: 'flex-end',\n      },\n      {\n        pointerEvents: 'none',\n        position: 'absolute',\n        bottom: 6,\n        right: 8,\n        top: 'auto',\n        fontSize: IconFontSizes.medium,\n        lineHeight: 18,\n      },\n      disabled && {\n        color: semanticColors.disabledText,\n      },\n    ],\n    description: [\n      classNames.description,\n      {\n        color: semanticColors.bodySubtext,\n        fontSize: fonts.xSmall.fontSize,\n      },\n    ],\n    errorMessage: [\n      classNames.errorMessage,\n      AnimationClassNames.slideDownIn20,\n      fonts.small,\n      {\n        color: semanticColors.errorText,\n        margin: 0,\n        paddingTop: 5,\n        display: 'flex',\n        alignItems: 'center',\n      },\n    ],\n    prefix: [classNames.prefix, fieldPrefixSuffix],\n    suffix: [classNames.suffix, fieldPrefixSuffix],\n    revealButton: [\n      classNames.revealButton,\n      'ms-Button',\n      'ms-Button--icon',\n      getFocusStyle(theme, { inset: 1 }),\n      {\n        height: 30,\n        width: 32,\n        border: 'none',\n        padding: '0px 4px',\n        backgroundColor: 'transparent',\n        color: semanticColors.link,\n        selectors: {\n          ':hover': {\n            outline: 0,\n            color: semanticColors.primaryButtonBackgroundHovered,\n            backgroundColor: semanticColors.buttonBackgroundHovered,\n            selectors: {\n              [HighContrastSelector]: {\n                borderColor: 'Highlight',\n                color: 'Highlight',\n              },\n            },\n          },\n          ':focus': { outline: 0 },\n        },\n      },\n      hasIcon && {\n        marginRight: 28,\n      },\n    ],\n    revealSpan: {\n      display: 'flex',\n      height: '100%',\n      alignItems: 'center',\n    },\n    revealIcon: {\n      margin: '0px 4px',\n      pointerEvents: 'none',\n      bottom: 6,\n      right: 8,\n      top: 'auto',\n      fontSize: IconFontSizes.medium,\n      lineHeight: 18,\n    },\n    subComponentStyles: {\n      label: getLabelStyles(props),\n    },\n  };\n}\n","import * as React from 'react';\nimport { styled } from '../../Utilities';\nimport { TextFieldBase } from './TextField.base';\nimport { getStyles } from './TextField.styles';\nimport type { ITextFieldProps, ITextFieldStyles, ITextFieldStyleProps } from './TextField.types';\n\nexport const TextField: React.FunctionComponent<ITextFieldProps> = styled<\n  ITextFieldProps,\n  ITextFieldStyleProps,\n  ITextFieldStyles\n>(TextFieldBase, getStyles, undefined, {\n  scope: 'TextField',\n});\n\nexport type { ITextField } from './TextField.types';\n","import * as React from 'react';\nimport { getWindow } from './dom/getWindow';\n\n/**\n * DelayedRender component props.\n *\n * @public\n */\n// eslint-disable-next-line deprecation/deprecation\nexport interface IDelayedRenderProps extends React.Props<{}> {\n  /**\n   * Number of milliseconds to delay rendering children.\n   */\n  delay?: number;\n}\n\n/**\n * DelayedRender component state.\n *\n * @internal\n */\nexport interface IDelayedRenderState {\n  /**\n   * Whether the component is rendered or not.\n   */\n  isRendered: boolean;\n}\n\n/**\n * Utility component for delaying the render of a child component after a given delay. This component\n * requires a single child component; don't pass in many components. Wrap multiple components in a DIV\n * if necessary.\n *\n * @public\n * {@docCategory DelayedRender}\n */\nexport class DelayedRender extends React.Component<IDelayedRenderProps, IDelayedRenderState> {\n  public static defaultProps = {\n    delay: 0,\n  };\n\n  private _timeoutId: number | undefined;\n\n  constructor(props: IDelayedRenderProps) {\n    super(props);\n    this.state = {\n      isRendered: getWindow() === undefined,\n    };\n  }\n\n  public componentDidMount(): void {\n    let { delay } = this.props;\n    this._timeoutId = window.setTimeout(() => {\n      this.setState({\n        isRendered: true,\n      });\n    }, delay);\n  }\n\n  public componentWillUnmount(): void {\n    if (this._timeoutId) {\n      clearTimeout(this._timeoutId);\n    }\n  }\n\n  public render(): React.ReactElement<{}> | null {\n    return this.state.isRendered ? (React.Children.only(this.props.children) as React.ReactElement<{}>) : null;\n  }\n}\n","function _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nexport default function _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\n"],"names":["__browserNeedsRevealButton","getClassNames","classNamesFunction","COMPONENT_NAME","props","_textElement","_onFocus","ev","onFocus","setState","isFocused","validateOnFocusIn","_validate","value","_onBlur","onBlur","validateOnFocusOut","_onRenderLabel","label","required","labelStyles","_classNames","subComponentStyles","undefined","Label","htmlFor","_id","styles","disabled","id","_labelId","_onRenderDescription","description","className","_onRevealButtonClick","event","prevState","isRevealingPassword","_onInputChange","target","previousValue","_getValue","state","_lastChangeValue","onChange","_isControlled","uncontrolledValue","initializeComponentRef","_async","Async","_fallbackId","getId","_descriptionId","_prefixId","_suffixId","_warnControlledUsage","defaultValue","String","errorMessage","_delayedValidate","debounce","deferredValidationTime","_lastValidation","this","componentDidMount","_adjustInputHeight","validateOnLoad","componentWillUnmount","dispose","getSnapshotBeforeUpdate","prevProps","selection","selectionStart","selectionEnd","componentDidUpdate","snapshot","start","end","multiline","focus","setSelectionRange","prevValue","_shouldValidateAllChanges","render","borderless","invalid","iconProps","inputClassName","underlined","prefix","resizable","suffix","theme","autoAdjustHeight","canRevealPassword","revealPasswordAriaLabel","type","onRenderPrefix","_onRenderPrefix","onRenderSuffix","_onRenderSuffix","onRenderLabel","onRenderDescription","_errorMessage","isInvalid","hasRevealButton","win","getWindow","navigator","isEdge","test","userAgent","indexOf","isIE11","_browserNeedsRevealButton","classNames","focused","hasLabel","hasErrorMessage","hasIcon","ref","elementRef","root","wrapper","fieldGroup","_renderTextArea","_renderInput","Icon","icon","revealButton","onClick","revealSpan","revealIcon","iconName","_isDescriptionAvailable","role","DelayedRender","_renderErrorMessage","current","blur","select","setSelectionStart","setSelectionEnd","_hasWarnedNullValue","warn","valueProp","style","paddingBottom","textAreaProps","ariaLabelledBy","onInput","field","ariaLabel","readOnly","labelIds","push","inputProps","length","join","defaultRender","updatedInputProps","onRenderInput","_latestValidateValue","onGetErrorMessage","result","then","_notifyAfterValidate","onNotifyValidationResult","textField","height","scrollHeight","defaultProps","globalClassNames","unresizable","active","getLabelStyles","palette","fonts","color","neutralTertiary","fontSize","medium","marginRight","paddingLeft","paddingRight","lineHeight","selectors","TextField","styled","TextFieldBase","semanticColors","effects","fieldPrefixSuffix","background","disabledBackground","disabledText","inputPlaceholderText","display","alignItems","padding","whiteSpace","flexShrink","placeholderStyles","opacity","disabledPlaceholderStyles","position","borderBottom","errorText","inputBorder","width","borderBottomColor","borderColor","inputBorderHovered","inputFocusBorderAlt","border","borderRadius","roundedCorner2","inputBackground","cursor","flexDirection","minHeight","flex","textAlign","backgroundColor","content","top","right","inputText","minWidth","textOverflow","outline","resize","flexGrow","paddingTop","overflow","pointerEvents","bottom","bodySubtext","xSmall","small","margin","inset","link","primaryButtonBackgroundHovered","buttonBackgroundHovered","scope","isRendered","delay","_timeoutId","window","setTimeout","clearTimeout","children","_defineProperties","i","descriptor","enumerable","configurable","writable","Object","defineProperty","key","_createClass","Constructor","protoProps","staticProps","prototype"],"sourceRoot":""}