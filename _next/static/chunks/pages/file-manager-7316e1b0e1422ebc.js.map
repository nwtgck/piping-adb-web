{"version":3,"file":"static/chunks/pages/file-manager-7316e1b0e1422ebc.js","mappings":"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","sources":["webpack://_N_E/?e22b","webpack://_N_E/./src/pages/file-manager.tsx"],"sourcesContent":["\n    (window.__NEXT_P = window.__NEXT_P || []).push([\n      \"/file-manager\",\n      function () {\n        return require(\"private-next-pages/file-manager.tsx\");\n      }\n    ]);\n    if(module.hot) {\n      module.hot.dispose(function () {\n        window.__NEXT_P.push([\"/file-manager\"])\n      });\n    }\n  ","import { Breadcrumb, concatStyleSets, ContextualMenu, ContextualMenuItem, DetailsListLayoutMode, Dialog, DirectionalHint, IBreadcrumbItem, IColumn, Icon, IContextualMenuItem, IDetailsHeaderProps, IRenderFunction, Layer, MarqueeSelection, mergeStyleSets, Overlay, ProgressIndicator, Selection, ShimmeredDetailsList, Stack, StackItem } from '@fluentui/react';\nimport { FileIconType, getFileTypeIconProps, initializeFileTypeIcons } from \"@fluentui/react-file-type-icons\";\nimport { useConst } from '@fluentui/react-hooks';\nimport { getIcon } from '@fluentui/style-utilities';\nimport { AdbFeatures, ADB_SYNC_MAX_PACKET_SIZE, LinuxFileType, type AdbSyncEntry } from '@yume-chan/adb';\nimport { ChunkStream } from '@yume-chan/stream-extra';\nimport { action, autorun, makeAutoObservable, observable, runInAction } from \"mobx\";\nimport { observer } from \"mobx-react-lite\";\nimport { NextPage } from \"next\";\nimport Head from \"next/head\";\nimport Router, { useRouter } from \"next/router\";\nimport path from 'path';\nimport { useCallback, useEffect, useState } from 'react';\nimport { CommandBar, NoSsr } from '../components';\nimport { GlobalState } from '../state';\nimport { asyncEffect, createFileStream, formatSize, formatSpeed, Icons, pickFile, ProgressStream, RouteStackProps, saveFile } from '../utils';\n\ninitializeFileTypeIcons();\n\ninterface ListItem extends AdbSyncEntry {\n    key: string;\n}\n\nfunction toListItem(item: AdbSyncEntry): ListItem {\n    (item as ListItem).key = item.name;\n    return item as ListItem;\n}\n\nconst classNames = mergeStyleSets({\n    name: {\n        cursor: 'pointer',\n        '&:hover': {\n            textDecoration: 'underline',\n        },\n    },\n});\n\nconst renderDetailsHeader: IRenderFunction<IDetailsHeaderProps> = (props?, defaultRender?) => {\n    if (!props || !defaultRender) {\n        return null;\n    }\n\n    return defaultRender({\n        ...props,\n        styles: concatStyleSets(props.styles, { root: { paddingTop: 0 } })\n    });\n};\n\nfunction compareCaseInsensitively(a: string, b: string) {\n    let result = a.toLocaleLowerCase().localeCompare(b.toLocaleLowerCase());\n    if (result !== 0) {\n        return result;\n    } else {\n        return a.localeCompare(b);\n    }\n}\n\nclass FileManagerState {\n    initial = true;\n    visible = false;\n    path = '/';\n    loading = false;\n    items: ListItem[] = [];\n    sortKey: keyof ListItem = 'name';\n    sortDescending = false;\n\n    uploading = false;\n    uploadPath: string | undefined = undefined;\n    uploadedSize = 0;\n    uploadTotalSize = 0;\n    debouncedUploadedSize = 0;\n    uploadSpeed = 0;\n\n    selectedItems: ListItem[] = [];\n    contextMenuTarget: MouseEvent | undefined = undefined;\n\n    get breadcrumbItems(): IBreadcrumbItem[] {\n        let part = '';\n        const list: IBreadcrumbItem[] = this.path.split('/').filter(Boolean).map(segment => {\n            part += '/' + segment;\n            return {\n                key: part,\n                text: segment,\n                onClick: (e, item) => {\n                    if (!item) {\n                        return;\n                    }\n                    this.pushPathQuery(item.key);\n                },\n            };\n        });\n        list.unshift({\n            key: '/',\n            text: 'Device',\n            onClick: () => this.pushPathQuery('/'),\n        });\n        list[list.length - 1].isCurrentItem = true;\n        delete list[list.length - 1].onClick;\n        return list;\n    }\n\n    get menuItems() {\n        let result: IContextualMenuItem[] = [];\n\n        switch (this.selectedItems.length) {\n            case 0:\n                result.push({\n                    key: 'upload',\n                    text: 'Upload',\n                    iconProps: {\n                        iconName: Icons.CloudArrowUp,\n                        style: { height: 20, fontSize: 20, lineHeight: 1.5 }\n                    },\n                    disabled: !GlobalState.device,\n                    onClick: () => {\n                        (async () => {\n                            const files = await pickFile({ multiple: true });\n                            for (let i = 0; i < files.length; i++) {\n                                const file = files.item(i)!;\n                                await this.upload(file);\n                            }\n                        })();\n\n                        return false;\n                    }\n                });\n                break;\n            case 1:\n                if (this.selectedItems[0].type === LinuxFileType.File) {\n                    result.push({\n                        key: 'download',\n                        text: 'Download',\n                        iconProps: {\n                            iconName: Icons.CloudArrowDown,\n                            style: { height: 20, fontSize: 20, lineHeight: 1.5 }\n                        },\n                        onClick: () => {\n                            (async () => {\n                                const sync = await GlobalState.device!.sync();\n                                try {\n                                    const item = this.selectedItems[0];\n                                    const itemPath = path.resolve(this.path, item.name);\n                                    await sync.read(itemPath)\n                                        .pipeTo(saveFile(item.name, Number(item.size)));\n                                } catch (e: any) {\n                                    GlobalState.showErrorDialog(e);\n                                } finally {\n                                    sync.dispose();\n                                }\n                            })();\n                            return false;\n                        },\n                    });\n                }\n            // fall through\n            default:\n                result.push({\n                    key: 'delete',\n                    text: 'Delete',\n                    iconProps: {\n                        iconName: Icons.Delete,\n                        style: { height: 20, fontSize: 20, lineHeight: 1.5 }\n                    },\n                    onClick: () => {\n                        (async () => {\n                            try {\n                                for (const item of this.selectedItems) {\n                                    const output = await GlobalState.device!.rm(path.resolve(this.path, item.name!));\n                                    if (output) {\n                                        GlobalState.showErrorDialog(output);\n                                        return;\n                                    }\n                                }\n                            } catch (e: any) {\n                                GlobalState.showErrorDialog(e);\n                            } finally {\n                                this.loadFiles();\n                            }\n                        })();\n                        return false;\n                    }\n                });\n                break;\n        }\n\n        return result;\n    }\n\n    get sortedList() {\n        const list = this.items.slice();\n        list.sort((a, b) => {\n            const aIsFile = a.type === LinuxFileType.File ? 1 : 0;\n            const bIsFile = b.type === LinuxFileType.File ? 1 : 0;\n\n            let result: number;\n            if (aIsFile !== bIsFile) {\n                result = aIsFile - bIsFile;\n            } else {\n                const aSortKey = a[this.sortKey]!;\n                const bSortKey = b[this.sortKey]!;\n\n                if (aSortKey === bSortKey) {\n                    result = compareCaseInsensitively(a.name!, b.name!);\n                } else if (typeof aSortKey === 'string') {\n                    result = compareCaseInsensitively(aSortKey, bSortKey as string);\n                } else {\n                    result = aSortKey < bSortKey ? -1 : 1;\n                }\n            }\n\n            if (this.sortDescending) {\n                result *= -1;\n            }\n            return result;\n        });\n        return list;\n    }\n\n    get columns(): IColumn[] {\n        const ICON_SIZE = 20;\n\n        const list: IColumn[] = [\n            {\n                key: 'type',\n                name: 'File Type',\n                iconName: Icons.Document20,\n                isIconOnly: true,\n                minWidth: ICON_SIZE,\n                maxWidth: ICON_SIZE,\n                isCollapsible: true,\n                onRender(item: AdbSyncEntry) {\n                    let iconName: string;\n\n                    switch (item.type) {\n                        case LinuxFileType.Link:\n                            ({ iconName } = getFileTypeIconProps({ type: FileIconType.linkedFolder }));\n                            break;\n                        case LinuxFileType.Directory:\n                            ({ iconName } = getFileTypeIconProps({ type: FileIconType.folder }));\n                            break;\n                        case LinuxFileType.File:\n                            ({ iconName } = getFileTypeIconProps({ extension: path.extname(item.name!) }));\n                            break;\n                        default:\n                            ({ iconName } = getFileTypeIconProps({ extension: 'txt' }));\n                            break;\n                    }\n\n                    // `@fluentui/react-file-type-icons` doesn't export icon src.\n                    const iconSrc = (getIcon(iconName)!.code as unknown as JSX.Element).props.src;\n                    return <Icon imageProps={{ crossOrigin: 'anonymous', src: iconSrc }} style={{ width: ICON_SIZE, height: ICON_SIZE }} />;\n                }\n            },\n            {\n                key: 'name',\n                name: 'Name',\n                minWidth: 0,\n                isRowHeader: true,\n                onRender(item: AdbSyncEntry) {\n                    return (\n                        <span className={classNames.name} data-selection-invoke>\n                            {item.name}\n                        </span>\n                    );\n                }\n            },\n            {\n                key: 'permission',\n                name: 'Permission',\n                minWidth: 0,\n                isCollapsible: true,\n                onRender(item: AdbSyncEntry) {\n                    return `${(item.mode >> 6 & 0b100).toString(8)}${(item.mode >> 3 & 0b100).toString(8)}${(item.mode & 0b100).toString(8)}`;\n                }\n            },\n            {\n                key: 'size',\n                name: 'Size',\n                minWidth: 0,\n                isCollapsible: true,\n                onRender(item: AdbSyncEntry) {\n                    if (item.type === LinuxFileType.File) {\n                        return formatSize(Number(item.size));\n                    }\n                    return '';\n                }\n            },\n            {\n                key: 'mtime',\n                name: 'Last Modified Time',\n                minWidth: 150,\n                isCollapsible: true,\n                onRender(item: AdbSyncEntry) {\n                    return new Date(Number(item.mtime) * 1000).toLocaleString();\n                },\n            }\n        ];\n\n        if (GlobalState.device?.features?.includes(AdbFeatures.ListV2)) {\n            list.push(\n                {\n                    key: 'ctime',\n                    name: 'Creation Time',\n                    minWidth: 150,\n                    isCollapsible: true,\n                    onRender(item: AdbSyncEntry) {\n                        return new Date(Number(item.ctime!) * 1000).toLocaleString();\n                    },\n                },\n                {\n                    key: 'atime',\n                    name: 'Last Access Time',\n                    minWidth: 150,\n                    isCollapsible: true,\n                    onRender(item: AdbSyncEntry) {\n                        return new Date(Number(item.atime!) * 1000).toLocaleString();\n                    },\n                },\n            );\n        }\n\n        for (const item of list) {\n            item.onColumnClick = (e, column) => {\n                if (this.sortKey === column.key) {\n                    runInAction(() => this.sortDescending = !this.sortDescending);\n                } else {\n                    runInAction(() => {\n                        this.sortKey = column.key as keyof ListItem;\n                        this.sortDescending = false;\n                    });\n                }\n            };\n\n            if (item.key === this.sortKey) {\n                item.isSorted = true;\n                item.isSortedDescending = this.sortDescending;\n            }\n        }\n\n        return list;\n    }\n\n    constructor() {\n        makeAutoObservable(this, {\n            initial: false,\n            items: observable.shallow,\n            pushPathQuery: false,\n            changeDirectory: action.bound,\n            loadFiles: false,\n        });\n\n        autorun(() => {\n            if (GlobalState.device) {\n                if (this.initial && this.visible) {\n                    this.initial = false;\n                    this.loadFiles();\n                }\n            } else {\n                this.initial = true;\n            }\n        });\n    }\n\n    pushPathQuery = (path: string) => {\n        Router.push({ query: { ...Router.query, path } });\n    };\n\n    changeDirectory(path: string) {\n        if (this.path === path) {\n            return;\n        }\n\n        this.path = path;\n\n        if (!GlobalState.device) {\n            return;\n        }\n\n        this.loadFiles();\n    }\n\n    loadFiles = asyncEffect(async (signal) => {\n        const currentPath = this.path;\n\n        runInAction(() => this.items = []);\n\n        if (!GlobalState.device) {\n            return;\n        }\n\n        runInAction(() => this.loading = true);\n\n        const sync = await GlobalState.device.sync();\n\n        const items: ListItem[] = [];\n        const linkItems: AdbSyncEntry[] = [];\n        const intervalId = setInterval(() => {\n            if (signal.aborted) {\n                return;\n            }\n\n            runInAction(() => this.items = items.slice());\n        }, 1000);\n\n        try {\n            for await (const entry of sync.opendir(currentPath)) {\n                if (signal.aborted) {\n                    return;\n                }\n\n                if (entry.name === '.' || entry.name === '..') {\n                    continue;\n                }\n\n                if (entry.type === LinuxFileType.Link) {\n                    linkItems.push(entry);\n                } else {\n                    items.push(toListItem(entry));\n                }\n            }\n\n            for (const entry of linkItems) {\n                if (signal.aborted) {\n                    return;\n                }\n\n                if (!await sync.isDirectory(path.resolve(currentPath, entry.name!))) {\n                    entry.mode = (LinuxFileType.File << 12) | entry.permission;\n                    entry.size = 0n;\n                }\n\n                items.push(toListItem(entry));\n            }\n\n            if (signal.aborted) {\n                return;\n            }\n\n            runInAction(() => this.items = items);\n        } finally {\n            if (!signal.aborted) {\n                runInAction(() => this.loading = false);\n            }\n            clearInterval(intervalId);\n            sync.dispose();\n        }\n    });\n\n    upload = async (file: File) => {\n        const sync = await GlobalState.device!.sync();\n        try {\n            const itemPath = path.resolve(this.path!, file.name);\n            runInAction(() => {\n                this.uploading = true;\n                this.uploadPath = file.name;\n                this.uploadedSize = 0;\n                this.uploadTotalSize = file.size;\n                this.debouncedUploadedSize = 0;\n                this.uploadSpeed = 0;\n            });\n\n            const intervalId = setInterval(action(() => {\n                this.uploadSpeed = this.uploadedSize - this.debouncedUploadedSize;\n                this.debouncedUploadedSize = this.uploadedSize;\n            }), 1000);\n\n            try {\n                await createFileStream(file)\n                    .pipeThrough(new ChunkStream(ADB_SYNC_MAX_PACKET_SIZE))\n                    .pipeThrough(new ProgressStream(action((uploaded) => {\n                        this.uploadedSize = uploaded;\n                    })))\n                    .pipeTo(sync.write(\n                        itemPath,\n                        (LinuxFileType.File << 12) | 0o666,\n                        file.lastModified / 1000,\n                    ));\n\n                runInAction(() => {\n                    this.uploadSpeed = this.uploadedSize - this.debouncedUploadedSize;\n                    this.debouncedUploadedSize = this.uploadedSize;\n                });\n            } finally {\n                clearInterval(intervalId);\n            }\n        } catch (e: any) {\n            GlobalState.showErrorDialog(e);\n        } finally {\n            sync.dispose();\n            this.loadFiles();\n            runInAction(() => {\n                this.uploading = false;\n            });\n        }\n    };\n}\n\nconst state = new FileManagerState();\n\nconst UploadDialog = observer(() => {\n    return (\n        <Dialog\n            hidden={!state.uploading}\n            dialogContentProps={{\n                title: 'Uploading...',\n                subText: state.uploadPath\n            }}\n        >\n            <ProgressIndicator\n                description={formatSpeed(state.debouncedUploadedSize, state.uploadTotalSize, state.uploadSpeed)}\n                percentComplete={state.uploadedSize / state.uploadTotalSize}\n            />\n        </Dialog>\n    );\n});\n\nconst FileManager: NextPage = (): JSX.Element | null => {\n    useEffect(() => {\n        runInAction(() => {\n            state.visible = true;\n        });\n\n        return () => {\n            runInAction(() => {\n                state.visible = false;\n            });\n        };\n    });\n\n    const router = useRouter();\n    useEffect(() => {\n        let pathQuery = router.query.path;\n        if (!pathQuery) {\n            router.replace({ query: { ...router.query, path: state.path } });\n            return;\n        }\n\n        if (Array.isArray(pathQuery)) {\n            pathQuery = pathQuery[0];\n        }\n\n        state.changeDirectory(pathQuery);\n    }, [router]);\n\n    const [previewUrl, setPreviewUrl] = useState<string | undefined>();\n    const previewImage = useCallback(async (path: string) => {\n        const sync = await GlobalState.device!.sync();\n        try {\n            const readable = sync.read(path);\n            // @ts-ignore ReadableStream definitions are slightly incompatible\n            const response = new Response(readable);\n            const blob = await response.blob();\n            const url = window.URL.createObjectURL(blob);\n            setPreviewUrl(url);\n        } finally {\n            sync.dispose();\n        }\n    }, []);\n    const hidePreview = useCallback(() => {\n        setPreviewUrl(undefined);\n    }, []);\n\n    const handleItemInvoked = useCallback((item: AdbSyncEntry) => {\n        switch (item.type) {\n            case LinuxFileType.Link:\n            case LinuxFileType.Directory:\n                state.pushPathQuery(path.resolve(state.path!, item.name!));\n                break;\n            case LinuxFileType.File:\n                switch (path.extname(item.name!)) {\n                    case '.jpg':\n                    case '.png':\n                    case '.svg':\n                    case '.gif':\n                        previewImage(path.resolve(state.path!, item.name!));\n                        break;\n                }\n                break;\n        }\n    }, [previewImage]);\n\n    const selection = useConst(() => new Selection({\n        onSelectionChanged() {\n            runInAction(() => {\n                state.selectedItems = selection.getSelection() as ListItem[];\n            });\n        },\n    }));\n\n    const showContextMenu = useCallback((\n        item?: AdbSyncEntry,\n        index?: number,\n        e?: Event\n    ) => {\n        if (!e) {\n            return false;\n        }\n\n        if (state.menuItems.length) {\n            runInAction(() => {\n                state.contextMenuTarget = e as MouseEvent;\n            });\n        }\n\n        return false;\n    }, []);\n    const hideContextMenu = useCallback(() => {\n        runInAction(() => state.contextMenuTarget = undefined);\n    }, []);\n\n    return (\n        <Stack {...RouteStackProps}>\n            <Head>\n                <title>File Manager - Android Web Toolbox</title>\n            </Head>\n\n            <CommandBar items={state.menuItems} />\n\n            <Breadcrumb items={state.breadcrumbItems} />\n\n            <StackItem grow styles={{\n                root: {\n                    margin: '-8px -16px -16px -16px',\n                    padding: '8px 16px 16px 16px',\n                    overflowY: 'auto',\n                }\n            }}>\n                <MarqueeSelection selection={selection}>\n                    <ShimmeredDetailsList\n                        items={state.sortedList}\n                        columns={state.columns}\n                        setKey={state.path}\n                        selection={selection}\n                        layoutMode={DetailsListLayoutMode.justified}\n                        enableShimmer={state.loading && state.items.length === 0}\n                        onItemInvoked={handleItemInvoked}\n                        onItemContextMenu={showContextMenu}\n                        onRenderDetailsHeader={renderDetailsHeader}\n                        usePageCache\n                        useReducedRowRenderer\n                    />\n                </MarqueeSelection>\n\n                {previewUrl && (\n                    <Layer>\n                        <Overlay onClick={hidePreview}>\n                            <div style={{ width: '100%', height: '100%', display: 'flex', alignItems: 'center', justifyContent: 'center' }}>\n                                {/* eslint-disable-next-line @next/next/no-img-element */}\n                                <img src={previewUrl} alt=\"\" style={{ maxWidth: '100%', maxHeight: '100%' }} />\n                            </div>\n                        </Overlay>\n                    </Layer>\n                )}\n            </StackItem>\n\n            <NoSsr>\n                <ContextualMenu\n                    items={state.menuItems}\n                    hidden={!state.contextMenuTarget}\n                    directionalHint={DirectionalHint.bottomLeftEdge}\n                    target={state.contextMenuTarget}\n                    onDismiss={hideContextMenu}\n                    contextualMenuItemAs={props => <ContextualMenuItem {...props} hasIcons={false} />}\n                />\n            </NoSsr>\n\n            <UploadDialog />\n        </Stack>\n    );\n};\n\nexport default observer(FileManager);\n"],"names":["window","__NEXT_P","push","toListItem","item","key","name","initializeFileTypeIcons","classNames","mergeStyleSets","cursor","textDecoration","renderDetailsHeader","props","defaultRender","styles","concatStyleSets","root","paddingTop","compareCaseInsensitively","a","b","result","toLocaleLowerCase","localeCompare","FileManagerState","initial","visible","path","loading","items","sortKey","sortDescending","uploading","uploadPath","undefined","uploadedSize","uploadTotalSize","debouncedUploadedSize","uploadSpeed","selectedItems","contextMenuTarget","pushPathQuery","Router","query","loadFiles","asyncEffect","signal","currentPath","sync","linkItems","intervalId","entry","runInAction","GlobalState","setInterval","aborted","slice","opendir","type","LinuxFileType","isDirectory","mode","permission","size","clearInterval","dispose","upload","file","itemPath","action","createFileStream","pipeThrough","ChunkStream","ADB_SYNC_MAX_PACKET_SIZE","ProgressStream","uploaded","pipeTo","write","lastModified","makeAutoObservable","this","observable","changeDirectory","autorun","breadcrumbItems","part","list","split","filter","Boolean","map","segment","text","onClick","e","unshift","length","isCurrentItem","menuItems","iconProps","iconName","Icons","style","height","fontSize","lineHeight","disabled","files","i","pickFile","multiple","read","saveFile","Number","output","sortedList","sort","aIsFile","bIsFile","aSortKey","bSortKey","columns","isIconOnly","minWidth","maxWidth","isCollapsible","onRender","getFileTypeIconProps","FileIconType","extension","iconSrc","code","src","Icon","imageProps","crossOrigin","width","isRowHeader","span","className","data-selection-invoke","toString","formatSize","Date","mtime","toLocaleString","features","includes","AdbFeatures","ctime","atime","onColumnClick","column","isSorted","isSortedDescending","state","UploadDialog","observer","Dialog","hidden","dialogContentProps","title","subText","ProgressIndicator","description","formatSpeed","percentComplete","useEffect","router","useRouter","pathQuery","Array","isArray","replace","useState","previewUrl","setPreviewUrl","previewImage","useCallback","readable","response","blob","url","Response","URL","createObjectURL","hidePreview","handleItemInvoked","selection","useConst","Selection","onSelectionChanged","getSelection","showContextMenu","index","hideContextMenu","Stack","RouteStackProps","Head","CommandBar","Breadcrumb","StackItem","grow","margin","padding","overflowY","MarqueeSelection","ShimmeredDetailsList","setKey","layoutMode","DetailsListLayoutMode","enableShimmer","onItemInvoked","onItemContextMenu","onRenderDetailsHeader","usePageCache","useReducedRowRenderer","Layer","Overlay","div","display","alignItems","justifyContent","img","alt","maxHeight","NoSsr","ContextualMenu","directionalHint","DirectionalHint","target","onDismiss","contextualMenuItemAs","ContextualMenuItem","hasIcons"],"sourceRoot":""}