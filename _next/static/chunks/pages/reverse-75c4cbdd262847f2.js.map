{"version":3,"file":"static/chunks/pages/reverse-75c4cbdd262847f2.js","mappings":"oFACKA,OAAOC,SAAWD,OAAOC,UAAY,IAAIC,KAAK,CAC7C,WACA,WACE,OAAO,EAAQ,U,sICGjBC,GAAQC,EAAAA,EAAAA,IAAmB,CAC7BC,IAAK,MAGTC,EAAAA,EAAAA,KAAS,W,OAAMC,EAAAA,EAAAA,SAAoB,W,OAAA,4BAAMC,G,oEAChCA,EAAQ,C,gEAIPA,EAAOC,QAAQC,OAAO,YAAYC,OAAM,e,uBACxCH,EAAOC,QAAQG,IAAI,WAAY,YAAYC,SAAAA,GAa7C,OAZAC,EAAAA,EAAAA,IAAY,WACRX,EAAME,IAAIH,KAAK,mBAAkC,OAAfW,EAAOE,aAE7CF,EAAOG,SAASC,OAAO,IAAIC,EAAAA,GAAe,CACtCC,MAAOC,SAAAA,IACHN,EAAAA,EAAAA,IAAY,WACRX,EAAME,IAAIH,KAAK,aAAgCmB,OAAnBR,EAAOE,QAAQ,MAAsB,QAAlBM,EAAAA,EAAAA,IAAWD,aAM/D,K,2DAnB0BZ,G,gCAAN,GAqBhC,CAAEc,iBAAiB,IAYtB,WAAeC,EAAAA,EAAAA,KAVqB,WAChC,OACI,SAACC,MAAG,C,SACCrB,EAAME,IAAIoB,KAAI,SAACC,EAAMC,G,OAClB,SAACH,MAAG,C,SAAcE,GAARC,a","sources":["webpack://_N_E/?0aba","webpack://_N_E/./src/pages/reverse.tsx"],"sourcesContent":["\n    (window.__NEXT_P = window.__NEXT_P || []).push([\n      \"/reverse\",\n      function () {\n        return require(\"private-next-pages/reverse.tsx\");\n      }\n    ]);\n    if(module.hot) {\n      module.hot.dispose(function () {\n        window.__NEXT_P.push([\"/reverse\"])\n      });\n    }\n  ","import { decodeUtf8 } from \"@yume-chan/adb\";\nimport { WritableStream } from '@yume-chan/stream-extra';\nimport { makeAutoObservable, reaction, runInAction } from \"mobx\";\nimport { observer } from \"mobx-react-lite\";\nimport { NextPage } from \"next\";\nimport { GlobalState } from \"../state\";\n\nconst state = makeAutoObservable({\n    log: [] as string[],\n});\n\nreaction(() => GlobalState.device, async device => {\n    if (!device) {\n        return;\n    }\n\n    await device.reverse.remove('tcp:3000').catch(() => { });\n    await device.reverse.add('tcp:3000', 'tcp:1234', socket => {\n        runInAction(() => {\n            state.log.push(`received stream ${socket.localId}`);\n        });\n        socket.readable.pipeTo(new WritableStream({\n            write: chunk => {\n                runInAction(() => {\n                    state.log.push(`data from ${socket.localId}: ${decodeUtf8(chunk)}`);\n                });\n            }\n        }));\n\n        // Return true to accept the connection.\n        return true;\n    });\n}, { fireImmediately: true });\n\nconst ReverseTesterPage: NextPage = () => {\n    return (\n        <div>\n            {state.log.map((line, index) => (\n                <div key={index}>{line}</div>\n            ))}\n        </div>\n    );\n};\n\nexport default observer(ReverseTesterPage);\n"],"names":["window","__NEXT_P","push","state","makeAutoObservable","log","reaction","GlobalState","device","reverse","remove","catch","add","socket","runInAction","localId","readable","pipeTo","WritableStream","write","chunk","decodeUtf8","fireImmediately","observer","div","map","line","index"],"sourceRoot":""}