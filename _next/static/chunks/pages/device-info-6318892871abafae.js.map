{"version":3,"file":"static/chunks/pages/device-info-6318892871abafae.js","mappings":"oFACKA,OAAOC,SAAWD,OAAOC,UAAY,IAAIC,KAAK,CAC7C,eACA,WACE,OAAO,EAAQ,S,4CCMwB,E,yKAAzCC,GAAyC,EAiB9C,IAhBG,OAD2C,EAC1CC,EAAAA,GAAAA,QAAuB,wGAExB,OAH2C,EAG1CA,EAAAA,GAAAA,OAAqB,wJACtB,OAJ2C,EAI1CA,EAAAA,GAAAA,OAAqB,2HACtB,OAL2C,EAK1CA,EAAAA,GAAAA,eAA6B,6IAI9B,OAT2C,EAS3C,WAAY,oEAT+B,GA+F/C,WAAeC,EAAAA,EAAAA,KA5Ec,W,IAyBNC,EAAkB,EAQRA,EAOFA,EAOCA,EAafA,EAAkB,EA1D/B,OACI,UAACC,EAAAA,GAAK,kBAAKC,EAAAA,IAAe,C,WACtB,SAACC,IAAI,C,UACD,SAACC,QAAK,C,SAAC,yCAGX,UAACC,EAAAA,EAAU,C,WACP,SAACC,OAAI,C,SAAC,yGACN,SAACC,KAAE,KAEH,SAACC,OAAI,C,SAAC,cACN,SAACF,OAAI,C,SAAC,8CACN,SAACC,KAAE,KAEH,SAACC,OAAI,C,SAAC,cACN,SAACF,OAAI,C,SAAC,4CACN,SAACC,KAAE,KAEH,SAACD,OAAI,C,SAAC,yCACN,SAACG,EAAAA,GAAY,CAACC,KAAK,sE,SAAsE,qBAE7F,UAACJ,OAAI,C,WACD,SAACA,OAAI,C,SAAC,wBACN,SAACE,OAAI,C,SAAoB,QAAlBR,EAAAA,EAAAA,EAAAA,cAAkB,IAAlBA,GAAmC,QAAnCA,EAAAA,EAAoBW,uBAAe,WAAnCX,EAAAA,EAAqCY,SAAS,IAAIC,SAAS,EAAG,WAEzE,SAACC,EAAAA,EAAS,KAEV,UAACT,EAAAA,EAAU,C,WACP,SAACG,OAAI,C,SAAC,qBACN,SAACF,OAAI,C,SAAC,sCAEV,UAACA,OAAI,C,UAAC,iBAAiC,QAAlBN,EAAAA,EAAAA,EAAAA,cAAkB,IAAlBA,OAAAA,EAAAA,EAAoBe,YACzC,SAACD,EAAAA,EAAS,KAEV,UAACT,EAAAA,EAAU,C,WACP,SAACG,OAAI,C,SAAC,sBACN,SAACF,OAAI,C,SAAC,sCAEV,UAACA,OAAI,C,UAAC,eAA+B,QAAlBN,EAAAA,EAAAA,EAAAA,cAAkB,IAAlBA,OAAAA,EAAAA,EAAoBgB,UACvC,SAACF,EAAAA,EAAS,KAEV,UAACT,EAAAA,EAAU,C,WACP,SAACG,OAAI,C,SAAC,uBACN,SAACF,OAAI,C,SAAC,sCAEV,UAACA,OAAI,C,UAAC,gBAAgC,QAAlBN,EAAAA,EAAAA,EAAAA,cAAkB,IAAlBA,OAAAA,EAAAA,EAAoBiB,WACxC,SAACH,EAAAA,EAAS,KAEV,UAACT,EAAAA,EAAU,C,WACP,SAACC,OAAI,C,SAAC,wEACN,SAACC,KAAE,KAEH,SAACD,OAAI,C,SAAC,sEACN,SAACA,OAAI,C,SAAG,qFACR,SAACC,KAAE,QAEP,UAACD,OAAI,C,WACD,SAACA,OAAI,C,SAAC,eACa,QAAlBN,EAAAA,EAAAA,EAAAA,cAAkB,IAAlBA,GAA4B,QAA5BA,EAAAA,EAAoBkB,gBAAQ,WAA5BlB,EAAAA,EAA8BmB,KAAI,SAACC,EAASC,G,OACzC,UAACf,OAAI,C,UACU,IAAVe,IAAgB,SAACf,OAAI,C,SAAC,QACvB,SAACA,OAAI,C,SAAEc,IACNvB,EAAeuB,KACZ,SAACE,EAAAA,EAAW,CAACC,SAAS,SAACjB,OAAI,C,SAAET,EAAeuB,K,UACxC,SAACI,EAAAA,EAAI,CAACC,MAAO,CAAEC,WAAY,GAAKC,SAAUC,EAAAA,GAAAA,WAL3CR,iB,gMClFzBS,IAAQ,MACX,UAAsB,OACvB,EAAC,aAAyB,OAC1B,EAAC,WAAuB,aACxB,EAAC,aAAyB,WAC1B,EAAC,mBAA+B,UAChC,EAAC,aAAyB,Y,GAKtBC,GAAgB,EAAAC,EAAA,KAEhBC,EAA0B,SAACC,GAC/B,OAAQA,GACN,KAAK,YACL,KAAK,UACL,KAAK,kBACH,MAAO,YAEX,MAAO,UAGHC,EAAU,SAACD,GACf,OAAQA,GACN,KAAK,YACL,KAAK,UACL,KAAK,kBACH,MAAO,QAEX,MAAO,UAGIE,EAA4D,cAGvE,SAACC,EAAOC,GACF,OAAyD,EAAAC,EAAA,IAAW,GAAnEC,EAAgB,KAAYC,EAAsB,YACnDC,GAAU,EAAAC,EAAA,GAAM,cAGpBC,EAiBEP,EAAK,QAhBPQ,EAgBER,EAAK,UAfPS,EAeET,EAAK,SAbPU,EAaEV,EAAK,wBAZPW,EAYEX,EAAK,iBAXPY,EAWEZ,EAAK,OAVPa,EAUEb,EAAK,MATP,EASEA,EAAK,eATPH,OAAc,IAAG,WAAmB,EACpC,EAQEG,EAAK,UARPc,OAAS,IAAG,OAAAC,EAAS,EACrB,EAOEf,EAAK,YAPPgB,OAAW,IAAG,GAAI,EAClBC,EAMEjB,EAAK,UALPkB,EAKElB,EAAK,uBAJPmB,EAIEnB,EAAK,oBAHPoB,EAGEpB,EAAK,KAFP,EAEEA,EAAK,cAFPqB,OAAa,IAAG,GAAI,EACpBC,EACEtB,EAAK,kBAEHuB,GAAc,QAAsDvB,EAAO,KAAuB,CACtG,YACA,SAGIwB,EAA2D9B,EAAckB,EAAQ,CACrFC,MAAOA,EACPhB,eAAgBA,GAAkB,SAClCiB,eAAyBC,IAAdD,EACXP,aAAqBQ,IAAZR,EACTU,UAAWA,EACXD,YAAaA,EACbb,iBAAkBA,EAClBK,UAAS,IAGLiB,EAAkB,CAAElC,SAAUY,EAAmB,kBAAoB,qBACrEuB,EAAcnB,GAAWO,EAAY,CAAE,mBAAoBT,EAASe,KAAM,UAAa,GACvFO,EAAapB,EAAU,uBAAKC,UAAWgB,EAAWjB,SAAUA,GAAiB,KAE7EqB,EAAgBd,EACpB,gBAACe,EAAA,EAAU,CACTC,UAAU,EACVtB,UAAWgB,EAAWO,UACtBC,QAASlB,EACTmB,UAAWtB,GAAsC,CAAEpB,SAAU,SAC7DvB,MAAOkD,EACPgB,UAAWhB,IAEX,KAEJ,OACE,gCAAKjB,IAAKA,EAAKO,UAAWgB,EAAWW,MAAUT,GAC7C,uBAAKlB,UAAWgB,EAAWrC,SACzB,uBAAKqB,UAAWgB,EAAWY,cAAa,kBACrCjB,EACC,gBAAC/B,EAAA,GAAI,WAAK+B,EAAmB,CAAEX,WAAW,EAAA6B,EAAA,GAAIb,EAAWc,KAAMnB,EAAoBX,cAEnF,gBAACpB,EAAA,EAAI,CAACG,SAAUE,EAASI,GAAkBW,UAAWgB,EAAWc,QAGrE,uBACE9B,UAAWgB,EAAWe,KACtBC,GAAInC,EACJe,KAAMA,GAAQtB,EAAQD,GAAe,YAC1BD,EAAwBC,IAEnC,iCAAMW,UAAWgB,EAAWiB,WAAelB,GACxCF,EACC,gBAACqB,EAAA,EAAa,KACZ,4BAAOjC,IAKT,4BAAOA,MAK8BO,IAAgBW,GAAcV,GACrE,uBAAKT,UAAWgB,EAAWrB,kBACzB,gBAAC0B,EAAA,GAAU,SACTC,UAAU,EACVtB,UAAWgB,EAAWmB,OACtBX,QAAS5B,EACT6B,UAAWR,EACXS,UAAWxB,EAAuB,gBACnBP,GACXmB,MAKeN,GAAeW,GAEdX,GAAeY,GACvC,uBAAKpB,UAAWgB,EAAWoB,mBAAoBhB,GAG1BZ,GAAeY,GAEjBZ,GAAeW,MAI9C5B,EAAe8C,YAzIQ,a,oBCJjBC,EAAmB,CACvBX,KAAM,gBACNY,MAAO,uBACPC,QAAS,yBACTC,cAAe,+BACfC,QAAS,yBACTC,QAAS,yBACTC,UAAW,0BACXC,WAAY,2BACZC,oBAAqB,oCACrBC,oBAAqB,oCACrBpE,QAAS,wBACTiD,cAAe,qBACfG,KAAM,qBACNE,UAAW,0BACXG,kBAAmB,kCACnBzC,iBAAkB,iCAClB4B,UAAW,0BACXY,OAAQ,uBACRpC,QAAS,wBACTiD,kBAAmB,mCAGfC,IAAe,MAClB,WAAuB,kBACxB,EAAC,aAAyB,kBAC1B,EAAC,aAAyB,oBAC1B,EAAC,aAAyB,oBAC1B,EAAC,mBAA+B,0BAChC,EAAC,UAAsB,iB,GAGnBC,IAA2B,MAC9B,WAAuB,uBACxB,EAAC,aAAyB,uBAC1B,EAAC,aAAyB,yBAC1B,EAAC,aAAyB,0BAC1B,EAAC,mBAA+B,uBAChC,EAAC,UAAsB,S,GAGnBC,IAAS,MACZ,WAAuB,YACxB,EAAC,aAAyB,YAC1B,EAAC,aAAyB,cAC1B,EAAC,aAAyB,cAC1B,EAAC,mBAA+B,oBAChC,EAAC,UAAsB,W,GCtDZ1F,GAAwD,EAAA2F,EAAA,GAInE7D,GDqDuB,SAACC,G,cAEtBa,EAOEb,EAAK,MANPQ,EAMER,EAAK,UALPc,EAKEd,EAAK,UAJPiB,EAIEjB,EAAK,UAHPgB,EAGEhB,EAAK,YAFPG,EAEEH,EAAK,iBADP,EACEA,EAAK,eADPH,OAAc,IAAG,WAAmB,EAE9BgE,EAA0BhD,EAAK,eAAfiD,EAAUjD,EAAK,MAEjCkD,GAAsB,QAAkB,EAAG,MAE3CvC,GAAa,QAAoBsB,EAAkBjC,GAEnDmD,EAAsC,CAC1CC,SAAU,YACVC,OAAQ,GACRC,WAAY,OACZC,MAAOP,EAAeQ,YACtBC,WAAS,KACP,EAAC,OAAoB,qBAChB,WAA8B,CACjCF,MAAO,e,IAKPG,EAAkC,EACtC,QAAc1D,EAAO,CACnB2D,MAAO,EACPC,kBAAmB,CACjBC,cAAe,OACfC,QAAS,uBAEXC,YAAa,gBAEf,CACEC,WAAY,EACZC,MAAO,GACPZ,OAAQ,GACRa,QAAS,WACTT,UAAW,CACT,oBAAqBN,EACrB,SAAU,CACRP,gBAAiB,eAEnB,UAAW,CACTA,gBAAiB,kBAMzB,MAAO,CACLtB,KAAM,CACJX,EAAWW,KACX2B,EAAMkB,OACNnF,IAAmB,WAAwB2B,EAAWuB,MACtDlD,IAAmB,aAA0B2B,EAAWwB,QACxDnD,IAAmB,mBAAgC2B,EAAWyB,cAC9DpD,IAAmB,aAA0B2B,EAAW0B,QACxDrD,IAAmB,aAA0B2B,EAAW2B,QACxDnC,EAAcQ,EAAW4B,UAAY5B,EAAW6B,YAC/CrC,GAAeF,GAAaU,EAAW8B,qBACvCtC,GAAeC,GAAaO,EAAW+B,oBACxC,CACE0B,WAAYpB,EAAeJ,EAAgB5D,IAC3CuE,MAAOP,EAAeQ,YACtBa,UAAW,GACXJ,MAAO,OACPK,QAAS,OACTC,UAAW,aACXd,WAAS,GACP,WAAY,CACVF,MAAOP,EAAewB,YACtBf,UAAW,CACT,SAAU,CACRF,MAAOP,EAAeyB,uBAI5B,EAAC,OAAoB,qBAChB,WAA8B,CACjCL,WAAYvB,EAA4B7D,GACxC0F,OAAQ,uBACRnB,MAAO,e,IAIbpD,GAAe,CACbwE,cAAe,UAEjBhF,GAEFrB,QAAS,CACPqC,EAAWrC,QACX,CACEgG,QAAS,OACTL,MAAO,OACPX,WAAY,WAGhB/B,cAAe,CACbZ,EAAWY,cACX,CACE6B,SAAU,YACVwB,SAAU,GACVP,UAAW,GACXC,QAAS,OACTN,WAAY,EACZa,OAAQ,mBAGZpD,KAAM,CACJ8B,MAAOP,EAAeF,EAAU9D,IAChCyE,WAAS,KACP,EAAC,OAAoB,qBAChB,WAA8B,CACjCF,MAAO,e,IAIb7B,KAAM,CACJf,EAAWe,M,kBAETkD,SAAU,EACVN,QAAS,OACTQ,SAAU,EACVD,OAAQ,GACL5B,EAAM8B,OAAK,CACdtB,WAAS,KACP,EAAC,OAAoB,YAChB,W,MAIRxD,GAAa,CACZ+E,YAAa,KAGjBpD,UAAW,CACTjB,EAAWiB,UACX,CACE0B,WAAY,GACZG,UAAW,CACT,sBAAuB,CACrBwB,YAAa,KAInB7E,GAAa,CACX8E,SAAU,UACVC,WAAY,aAEbhF,GAAe,CAGd+E,SAAU,SACVE,aAAc,WACdD,WAAY,WAEbhF,IACEC,GAAa,CACZqD,WAAS,KACP,EAACP,GAAsB,CACrBgC,SAAU,UACVC,WAAY,Y,IAIpB7F,GAAoB,CAClB4F,SAAU,UACVC,WAAY,aAGhBpD,kBAAmBpB,EAAWoB,kBAC9BzC,iBAAkBqB,EAAWrB,iBAC7B4B,UAAW,CAACP,EAAWO,UAAWwC,GAClC5B,OAAQ,CAACnB,EAAWmB,OAAQ4B,GAC5BhE,QAAS,CACPS,EAAcQ,EAAWjB,QAAUiB,EAAWgC,kBAC9C,CACE2B,QAAS,OACTQ,SAAU,EACVd,WAAY,EACZqB,UAAW,OACXV,cAAe,cACfW,WAAY,SACZT,OAAQ,eACRpB,UAAW,CACT,0BAA2B,CACzBhF,WAAY,KAIlB0B,GAAe,CACboF,aAAc,GAEhBtF,IACGE,GAAe,CACd6E,YAAa,YC/PM9E,EAAW,CACtCsF,MAAO,gB,kCC+NT,IAAYC,E,gCAAZ,SAAYA,GAEV,mBAEA,qBAEA,yBAEA,qCAEA,yBAEA,yBAZF,CAAYA,IAAAA,EAAc,M,oGCtM1B,cAOE,WAAYtG,GAAZ,MACE,YAAMA,IAAM,K,OACZ,EAAKuG,MAAQ,CACXC,gBAA4BzF,KAAhB,U,EAsBlB,OAhCmC,aAc1B,YAAA0F,kBAAP,sBACQC,EAAUC,KAAK3G,MAAK,MAC1B2G,KAAKC,WAAatJ,OAAOuJ,YAAW,WAClC,EAAKC,SAAS,CACZN,YAAY,MAEbE,IAGE,YAAAK,qBAAP,WACMJ,KAAKC,YACPI,aAAaL,KAAKC,aAIf,YAAAK,OAAP,WACE,OAAON,KAAKJ,MAAMC,WAAc,gBAAoBG,KAAK3G,MAAMS,UAAuC,MA7B1F,EAAAyG,aAAe,CAC3BR,MAAO,GA8BX,EAhCA,CAAmC,e","sources":["webpack://_N_E/?bbb4","webpack://_N_E/./src/pages/device-info.tsx","webpack://_N_E/../../common/temp/node_modules/.pnpm/@fluentui+react@8.81.1_cktacisfg2p5lpuckvtl5f276a/node_modules/@fluentui/react/lib/components/src/components/MessageBar/MessageBar.base.tsx","webpack://_N_E/../../common/temp/node_modules/.pnpm/@fluentui+react@8.81.1_cktacisfg2p5lpuckvtl5f276a/node_modules/@fluentui/react/lib/components/src/components/MessageBar/MessageBar.styles.ts","webpack://_N_E/../../common/temp/node_modules/.pnpm/@fluentui+react@8.81.1_cktacisfg2p5lpuckvtl5f276a/node_modules/@fluentui/react/lib/components/src/components/MessageBar/MessageBar.tsx","webpack://_N_E/../../common/temp/node_modules/.pnpm/@fluentui+react@8.81.1_cktacisfg2p5lpuckvtl5f276a/node_modules/@fluentui/react/lib/components/src/components/MessageBar/MessageBar.types.ts","webpack://_N_E/../../common/temp/node_modules/.pnpm/@fluentui+utilities@8.9.0_wcklpcar7sgs6afjb4j5aji7wy/node_modules/@fluentui/utilities/src/DelayedRender.tsx"],"sourcesContent":["\n    (window.__NEXT_P = window.__NEXT_P || []).push([\n      \"/device-info\",\n      function () {\n        return require(\"private-next-pages/device-info.tsx\");\n      }\n    ]);\n    if(module.hot) {\n      module.hot.dispose(function () {\n        window.__NEXT_P.push([\"/device-info\"])\n      });\n    }\n  ","import { Icon, MessageBar, Separator, Stack, TooltipHost } from \"@fluentui/react\";\nimport { AdbFeatures } from \"@yume-chan/adb\";\nimport { observer } from 'mobx-react-lite';\nimport type { NextPage } from 'next';\nimport Head from 'next/head';\nimport React from \"react\";\nimport { ExternalLink } from \"../components\";\nimport { GlobalState } from '../state';\nimport { Icons, RouteStackProps } from \"../utils\";\n\nconst KNOWN_FEATURES: Record<string, string> = {\n    [AdbFeatures.ShellV2]: `\"shell\" command now supports separating child process's stdout and stderr, and returning exit code`,\n    // 'cmd': '',\n    [AdbFeatures.StatV2]: '\"sync\" command now supports \"STA2\" (returns more information of a file than old \"STAT\") and \"LST2\" (returns information of a directory) sub command',\n    [AdbFeatures.ListV2]: '\"sync\" command now supports \"LST2\" sub command which returns more information when listing a directory than old \"LIST\"',\n    [AdbFeatures.FixedPushMkdir]: 'Android 9 (P) introduced a bug that pushing files to a non-existing directory would fail. This feature indicates it\\'s fixed (Android 10)',\n    // 'apex': '',\n    // 'abb': '',\n    // 'fixed_push_symlink_timestamp': '',\n    'abb_exec': 'Support \"exec\" command which can stream stdin into child process',\n    // 'remount_shell': '',\n    // 'track_app': '',\n    // 'sendrecv_v2': '',\n    // 'sendrecv_v2_brotli': '',\n    // 'sendrecv_v2_lz4': '',\n    // 'sendrecv_v2_zstd': '',\n    // 'sendrecv_v2_dry_run_send': '',\n};\n\nconst DeviceInfo: NextPage = () => {\n\n    return (\n        <Stack {...RouteStackProps}>\n            <Head>\n                <title>Device Info - Android Web Toolbox</title>\n            </Head>\n\n            <MessageBar>\n                <span>ADB protocol version decides the packet format between client and server. By now it has 2 versions:</span>\n                <br />\n\n                <code>01000000</code>\n                <span> used in Android versions until 8 (Oreo)</span>\n                <br />\n\n                <code>01000001</code>\n                <span> used in Android versions from 9 (Pie)</span>\n                <br />\n\n                <span>For more information, you can check</span>\n                <ExternalLink href=\"https://chensi.moe/blog/2020/09/30/webadb-part2-connection/#version\">my blog post</ExternalLink>\n            </MessageBar>\n            <span>\n                <span>Protocol Version: </span>\n                <code>{GlobalState.device?.protocolVersion?.toString(16).padStart(8, '0')}</code>\n            </span>\n            <Separator />\n\n            <MessageBar>\n                <code>ro.product.name</code>\n                <span> field in Android Build Props</span>\n            </MessageBar>\n            <span>Product Name: {GlobalState.device?.product}</span>\n            <Separator />\n\n            <MessageBar>\n                <code>ro.product.model</code>\n                <span> field in Android Build Props</span>\n            </MessageBar>\n            <span>Model Name: {GlobalState.device?.model}</span>\n            <Separator />\n\n            <MessageBar>\n                <code>ro.product.device</code>\n                <span> field in Android Build Props</span>\n            </MessageBar>\n            <span>Device Name: {GlobalState.device?.device}</span>\n            <Separator />\n\n            <MessageBar>\n                <span>Feature list decides how each individual commands should behavior.</span>\n                <br />\n\n                <span>For example, it may indicate the availability of a new command, </span>\n                <span>{`or a workaround for an old bug is not required because it's already been fixed.`}</span>\n                <br />\n            </MessageBar>\n            <span>\n                <span>Features: </span>\n                {GlobalState.device?.features?.map((feature, index) => (\n                    <span key={feature}>\n                        {index !== 0 && (<span>, </span>)}\n                        <span>{feature}</span>\n                        {KNOWN_FEATURES[feature] && (\n                            <TooltipHost content={<span>{KNOWN_FEATURES[feature]}</span>}>\n                                <Icon style={{ marginLeft: 4 }} iconName={Icons.Info} />\n                            </TooltipHost>\n                        )}\n                    </span>\n                ))}\n            </span>\n        </Stack>\n    );\n};\n\nexport default observer(DeviceInfo);\n","import * as React from 'react';\nimport { DelayedRender, classNamesFunction, getNativeProps, htmlElementProperties, css } from '../../Utilities';\nimport { IconButton } from '../../Button';\nimport { Icon } from '../../Icon';\nimport { MessageBarType } from './MessageBar.types';\nimport { useId, useBoolean } from '@fluentui/react-hooks';\nimport type { IMessageBarProps, IMessageBarStyleProps, IMessageBarStyles } from './MessageBar.types';\n\nconst ICON_MAP = {\n  [MessageBarType.info]: 'Info',\n  [MessageBarType.warning]: 'Info',\n  [MessageBarType.error]: 'ErrorBadge',\n  [MessageBarType.blocked]: 'Blocked2',\n  [MessageBarType.severeWarning]: 'Warning',\n  [MessageBarType.success]: 'Completed',\n};\n\nconst COMPONENT_NAME = 'MessageBar';\n\nconst getClassNames = classNamesFunction<IMessageBarStyleProps, IMessageBarStyles>();\n\nconst getAnnouncementPriority = (messageBarType: MessageBarType): 'assertive' | 'polite' => {\n  switch (messageBarType) {\n    case MessageBarType.blocked:\n    case MessageBarType.error:\n    case MessageBarType.severeWarning:\n      return 'assertive';\n  }\n  return 'polite';\n};\n\nconst getRole = (messageBarType: MessageBarType): 'alert' | 'status' => {\n  switch (messageBarType) {\n    case MessageBarType.blocked:\n    case MessageBarType.error:\n    case MessageBarType.severeWarning:\n      return 'alert';\n  }\n  return 'status';\n};\n\nexport const MessageBarBase: React.FunctionComponent<IMessageBarProps> = React.forwardRef<\n  HTMLDivElement,\n  IMessageBarProps\n>((props, ref) => {\n  const [expandSingleLine, { toggle: toggleExpandSingleLine }] = useBoolean(false);\n  const labelId = useId('MessageBar');\n\n  const {\n    actions,\n    className,\n    children,\n    // eslint-disable-next-line deprecation/deprecation\n    overflowButtonAriaLabel,\n    dismissIconProps,\n    styles,\n    theme,\n    messageBarType = MessageBarType.info,\n    onDismiss = undefined,\n    isMultiline = true,\n    truncated,\n    dismissButtonAriaLabel,\n    messageBarIconProps,\n    role,\n    delayedRender = true,\n    expandButtonProps,\n  } = props;\n\n  const nativeProps = getNativeProps<React.HTMLAttributes<HTMLSpanElement>>(props, htmlElementProperties, [\n    'className',\n    'role',\n  ]);\n\n  const classNames: { [key in keyof IMessageBarStyles]: string } = getClassNames(styles, {\n    theme: theme!,\n    messageBarType: messageBarType || MessageBarType.info,\n    onDismiss: onDismiss !== undefined,\n    actions: actions !== undefined,\n    truncated: truncated,\n    isMultiline: isMultiline,\n    expandSingleLine: expandSingleLine,\n    className,\n  });\n\n  const expandIconProps = { iconName: expandSingleLine ? 'DoubleChevronUp' : 'DoubleChevronDown' };\n  const regionProps = actions || onDismiss ? { 'aria-describedby': labelId, role: 'region' } : {};\n  const actionsDiv = actions ? <div className={classNames.actions}>{actions}</div> : null;\n\n  const dismissButton = onDismiss ? (\n    <IconButton\n      disabled={false}\n      className={classNames.dismissal}\n      onClick={onDismiss}\n      iconProps={dismissIconProps ? dismissIconProps : { iconName: 'Clear' }}\n      title={dismissButtonAriaLabel}\n      ariaLabel={dismissButtonAriaLabel}\n    />\n  ) : null;\n\n  return (\n    <div ref={ref} className={classNames.root} {...regionProps}>\n      <div className={classNames.content}>\n        <div className={classNames.iconContainer} aria-hidden>\n          {messageBarIconProps ? (\n            <Icon {...messageBarIconProps} className={css(classNames.icon, messageBarIconProps.className)} />\n          ) : (\n            <Icon iconName={ICON_MAP[messageBarType!]} className={classNames.icon} />\n          )}\n        </div>\n        <div\n          className={classNames.text}\n          id={labelId}\n          role={role || getRole(messageBarType)}\n          aria-live={getAnnouncementPriority(messageBarType)}\n        >\n          <span className={classNames.innerText} {...nativeProps}>\n            {delayedRender ? (\n              <DelayedRender>\n                <span>{children}</span>\n              </DelayedRender>\n            ) : (\n              // this span is probably not necessary, but preserving it for now in case anyone\n              // has styling that expects it to be present\n              <span>{children}</span>\n            )}\n          </span>\n        </div>\n        {\n          /* singleline expand/collapse button */ !isMultiline && !actionsDiv && truncated && (\n            <div className={classNames.expandSingleLine}>\n              <IconButton\n                disabled={false}\n                className={classNames.expand}\n                onClick={toggleExpandSingleLine}\n                iconProps={expandIconProps}\n                ariaLabel={overflowButtonAriaLabel}\n                aria-expanded={expandSingleLine}\n                {...expandButtonProps}\n              />\n            </div>\n          )\n        }\n        {/* singleline actions */ !isMultiline && actionsDiv}\n        {\n          /* singleline dismiss */ !isMultiline && dismissButton && (\n            <div className={classNames.dismissSingleLine}>{dismissButton}</div>\n          )\n        }\n        {/* multiline dismiss */ isMultiline && dismissButton}\n      </div>\n      {/* multiline actions */ isMultiline && actionsDiv}\n    </div>\n  );\n});\nMessageBarBase.displayName = COMPONENT_NAME;\n","import {\n  HighContrastSelector,\n  ScreenWidthMaxSmall,\n  getScreenSelector,\n  getGlobalClassNames,\n  getFocusStyle,\n  IconFontSizes,\n  getHighContrastNoAdjustStyle,\n} from '../../Styling';\nimport { MessageBarType } from './MessageBar.types';\nimport type { IStyle, ISemanticColors } from '../../Styling';\nimport type { IMessageBarStyleProps, IMessageBarStyles } from './MessageBar.types';\n\nconst GlobalClassNames = {\n  root: 'ms-MessageBar',\n  error: 'ms-MessageBar--error',\n  blocked: 'ms-MessageBar--blocked',\n  severeWarning: 'ms-MessageBar--severeWarning',\n  success: 'ms-MessageBar--success',\n  warning: 'ms-MessageBar--warning',\n  multiline: 'ms-MessageBar-multiline',\n  singleline: 'ms-MessageBar-singleline',\n  dismissalSingleLine: 'ms-MessageBar-dismissalSingleLine',\n  expandingSingleLine: 'ms-MessageBar-expandingSingleLine',\n  content: 'ms-MessageBar-content',\n  iconContainer: 'ms-MessageBar-icon',\n  text: 'ms-MessageBar-text',\n  innerText: 'ms-MessageBar-innerText',\n  dismissSingleLine: 'ms-MessageBar-dismissSingleLine',\n  expandSingleLine: 'ms-MessageBar-expandSingleLine',\n  dismissal: 'ms-MessageBar-dismissal',\n  expand: 'ms-MessageBar-expand',\n  actions: 'ms-MessageBar-actions',\n  actionsSingleline: 'ms-MessageBar-actionsSingleLine',\n};\n\nconst backgroundColor: { [key: string]: keyof ISemanticColors } = {\n  [MessageBarType.error]: 'errorBackground',\n  [MessageBarType.blocked]: 'errorBackground',\n  [MessageBarType.success]: 'successBackground',\n  [MessageBarType.warning]: 'warningBackground',\n  [MessageBarType.severeWarning]: 'severeWarningBackground',\n  [MessageBarType.info]: 'infoBackground',\n};\n\nconst highContrastBackgroundColor: { [key: string]: string } = {\n  [MessageBarType.error]: 'rgba(255, 0, 0, 0.3)',\n  [MessageBarType.blocked]: 'rgba(255, 0, 0, 0.3)',\n  [MessageBarType.success]: 'rgba(48, 241, 73, 0.3)',\n  [MessageBarType.warning]: 'rgba(255, 254, 57, 0.3)',\n  [MessageBarType.severeWarning]: 'rgba(255, 0, 0, 0.3)',\n  [MessageBarType.info]: 'Window',\n};\n\nconst iconColor: { [key: string]: keyof ISemanticColors } = {\n  [MessageBarType.error]: 'errorIcon',\n  [MessageBarType.blocked]: 'errorIcon',\n  [MessageBarType.success]: 'successIcon',\n  [MessageBarType.warning]: 'warningIcon',\n  [MessageBarType.severeWarning]: 'severeWarningIcon',\n  [MessageBarType.info]: 'infoIcon',\n};\n\nexport const getStyles = (props: IMessageBarStyleProps): IMessageBarStyles => {\n  const {\n    theme,\n    className,\n    onDismiss,\n    truncated,\n    isMultiline,\n    expandSingleLine,\n    messageBarType = MessageBarType.info,\n  } = props;\n  const { semanticColors, fonts } = theme;\n\n  const SmallScreenSelector = getScreenSelector(0, ScreenWidthMaxSmall);\n\n  const classNames = getGlobalClassNames(GlobalClassNames, theme);\n\n  const dismissalAndExpandIconStyle: IStyle = {\n    fontSize: IconFontSizes.xSmall,\n    height: 10,\n    lineHeight: '10px',\n    color: semanticColors.messageText,\n    selectors: {\n      [HighContrastSelector]: {\n        ...getHighContrastNoAdjustStyle(),\n        color: 'WindowText',\n      },\n    },\n  };\n\n  const dismissalAndExpandStyle: IStyle = [\n    getFocusStyle(theme, {\n      inset: 1,\n      highContrastStyle: {\n        outlineOffset: '-6px',\n        outline: '1px solid Highlight',\n      },\n      borderColor: 'transparent',\n    }),\n    {\n      flexShrink: 0,\n      width: 32,\n      height: 32,\n      padding: '8px 12px',\n      selectors: {\n        '& .ms-Button-icon': dismissalAndExpandIconStyle,\n        ':hover': {\n          backgroundColor: 'transparent',\n        },\n        ':active': {\n          backgroundColor: 'transparent',\n        },\n      },\n    },\n  ];\n\n  return {\n    root: [\n      classNames.root,\n      fonts.medium,\n      messageBarType === MessageBarType.error && classNames.error,\n      messageBarType === MessageBarType.blocked && classNames.blocked,\n      messageBarType === MessageBarType.severeWarning && classNames.severeWarning,\n      messageBarType === MessageBarType.success && classNames.success,\n      messageBarType === MessageBarType.warning && classNames.warning,\n      isMultiline ? classNames.multiline : classNames.singleline,\n      !isMultiline && onDismiss && classNames.dismissalSingleLine,\n      !isMultiline && truncated && classNames.expandingSingleLine,\n      {\n        background: semanticColors[backgroundColor[messageBarType]],\n        color: semanticColors.messageText,\n        minHeight: 32,\n        width: '100%',\n        display: 'flex',\n        wordBreak: 'break-word',\n        selectors: {\n          '.ms-Link': {\n            color: semanticColors.messageLink,\n            selectors: {\n              ':hover': {\n                color: semanticColors.messageLinkHovered,\n              },\n            },\n          },\n          [HighContrastSelector]: {\n            ...getHighContrastNoAdjustStyle(),\n            background: highContrastBackgroundColor[messageBarType],\n            border: '1px solid WindowText',\n            color: 'WindowText',\n          },\n        },\n      },\n      isMultiline && {\n        flexDirection: 'column',\n      },\n      className,\n    ],\n    content: [\n      classNames.content,\n      {\n        display: 'flex',\n        width: '100%',\n        lineHeight: 'normal',\n      },\n    ],\n    iconContainer: [\n      classNames.iconContainer,\n      {\n        fontSize: IconFontSizes.medium,\n        minWidth: 16,\n        minHeight: 16,\n        display: 'flex',\n        flexShrink: 0,\n        margin: '8px 0 8px 12px',\n      },\n    ],\n    icon: {\n      color: semanticColors[iconColor[messageBarType]],\n      selectors: {\n        [HighContrastSelector]: {\n          ...getHighContrastNoAdjustStyle(),\n          color: 'WindowText',\n        },\n      },\n    },\n    text: [\n      classNames.text,\n      {\n        minWidth: 0,\n        display: 'flex',\n        flexGrow: 1,\n        margin: 8,\n        ...fonts.small,\n        selectors: {\n          [HighContrastSelector]: {\n            ...getHighContrastNoAdjustStyle(),\n          },\n        },\n      },\n      !onDismiss && {\n        marginRight: 12,\n      },\n    ],\n    innerText: [\n      classNames.innerText,\n      {\n        lineHeight: 16,\n        selectors: {\n          '& span a:last-child': {\n            paddingLeft: 4,\n          },\n        },\n      },\n      truncated && {\n        overflow: 'visible',\n        whiteSpace: 'pre-wrap',\n      },\n      !isMultiline && {\n        // In high contrast this causes the top and bottom of links' focus outline to be clipped\n        // (not sure of a good way around that while still maintaining text clipping)\n        overflow: 'hidden',\n        textOverflow: 'ellipsis',\n        whiteSpace: 'nowrap',\n      },\n      !isMultiline &&\n        !truncated && {\n          selectors: {\n            [SmallScreenSelector]: {\n              overflow: 'visible',\n              whiteSpace: 'pre-wrap',\n            },\n          },\n        },\n      expandSingleLine && {\n        overflow: 'visible',\n        whiteSpace: 'pre-wrap',\n      },\n    ],\n    dismissSingleLine: classNames.dismissSingleLine,\n    expandSingleLine: classNames.expandSingleLine,\n    dismissal: [classNames.dismissal, dismissalAndExpandStyle],\n    expand: [classNames.expand, dismissalAndExpandStyle],\n    actions: [\n      isMultiline ? classNames.actions : classNames.actionsSingleline,\n      {\n        display: 'flex',\n        flexGrow: 0,\n        flexShrink: 0,\n        flexBasis: 'auto',\n        flexDirection: 'row-reverse',\n        alignItems: 'center',\n        margin: '0 12px 0 8px',\n        selectors: {\n          '& button:nth-child(n+2)': {\n            marginLeft: 8,\n          },\n        },\n      },\n      isMultiline && {\n        marginBottom: 8,\n      },\n      onDismiss &&\n        !isMultiline && {\n          marginRight: 0,\n        },\n    ],\n  };\n};\n","import * as React from 'react';\nimport { styled } from '../../Utilities';\nimport { MessageBarBase } from './MessageBar.base';\nimport { getStyles } from './MessageBar.styles';\nimport type { IMessageBarProps, IMessageBarStyleProps, IMessageBarStyles } from './MessageBar.types';\n\nexport const MessageBar: React.FunctionComponent<IMessageBarProps> = styled<\n  IMessageBarProps,\n  IMessageBarStyleProps,\n  IMessageBarStyles\n>(MessageBarBase, getStyles, undefined, {\n  scope: 'MessageBar',\n});\n","import * as React from 'react';\nimport { BaseButton, Button, IButtonProps } from '../../Button';\nimport type { ITheme, IStyle } from '../../Styling';\nimport type { IRefObject, IStyleFunctionOrObject } from '../../Utilities';\nimport type { IIconProps } from '../../Icon';\n\n/**\n * {@docCategory MessageBar}\n */\nexport interface IMessageBar {}\n\n/**\n * {@docCategory MessageBar}\n */\nexport interface IMessageBarProps extends React.HTMLAttributes<HTMLElement>, React.RefAttributes<HTMLDivElement> {\n  /**\n   * Optional callback to access the IMessageBar interface. Use this instead of ref for accessing\n   * the public methods and properties of the component.\n   */\n  componentRef?: IRefObject<IMessageBar>;\n\n  /**\n   * The type of MessageBar to render.\n   * @defaultvalue MessageBarType.info\n   */\n  messageBarType?: MessageBarType;\n\n  /**\n   * The actions you want to show on the other side.\n   */\n  actions?: JSX.Element;\n\n  /**\n   * A description of the message bar for the benefit of screen readers.\n   * @deprecated Use native prop `aria-label` instead.\n   */\n  ariaLabel?: string;\n\n  /**\n   * Whether the message bar has a dismiss button and its callback.\n   * If null, we don't show a dismiss button.\n   * @defaultvalue null\n   */\n  // eslint-disable-next-line deprecation/deprecation\n  onDismiss?: (ev?: React.MouseEvent<HTMLElement | BaseButton | Button>) => any;\n\n  /**\n   * Determines if the message bar is multi lined.\n   * If false, and the text overflows over buttons or to another line, it is clipped.\n   * @defaultvalue true\n   */\n  isMultiline?: boolean;\n\n  /**\n   * Aria label on dismiss button if onDismiss is defined.\n   */\n  dismissButtonAriaLabel?: string;\n\n  /**\n   * Determines if the message bar text is truncated.\n   * If true, a button will render to toggle between a single line view and multiline view.\n   * This prop is for single line message bars with no buttons only in a limited space scenario.\n   * @defaultvalue false\n   */\n  truncated?: boolean;\n\n  /**\n   * Aria label on overflow button if truncated is defined.\n   * @deprecated Use `expandButtonProps` instead.\n   */\n  overflowButtonAriaLabel?: string;\n\n  /**\n   * Additional CSS class(es) to apply to the MessageBar.\n   */\n  className?: string;\n\n  /**\n   * Theme (provided through customization.)\n   */\n  theme?: ITheme;\n\n  /**\n   * Call to provide customized styling that will layer on top of the variant rules.\n   */\n  styles?: IStyleFunctionOrObject<IMessageBarStyleProps, IMessageBarStyles>;\n\n  /**\n   * Custom icon prop to replace the dismiss icon.\n   * If unset, default will be the Fabric Clear icon.\n   */\n  dismissIconProps?: IIconProps;\n\n  /**\n   * Custom icon prop to replace the message bar icon.\n   * If unset, default will be the icon set by messageBarType.\n   */\n  messageBarIconProps?: IIconProps;\n\n  /**\n   *  Button props that can be applied to the expand button of the MessageBar.\n   */\n  expandButtonProps?: IButtonProps;\n\n  /**\n   * Custom role to apply to the MessageBar.\n   * @defaultvalue `alert` if `messageBarType` is `error`, `blocked`, or `severeWarning`;\n   * or `status` otherwise\n   */\n  role?: 'alert' | 'status' | 'none';\n\n  /**\n   * By default, MessageBar delay-renders its content within an internal live region to help ensure\n   * it's announced by screen readers. You can disable that behavior by setting this prop to `false`.\n   *\n   * If you set this prop to `false`, to ensure proper announcement you should either:\n   * - If appropriate, ensure that the `role` prop is set to `alert` (this will be done by default\n   *   if `messageBarType` is `error`, `blocked`, or `severeWarning`), OR\n   * - Set the `role` prop to `none` (to avoid nested `status` regions), wrap the whole MessageBar\n   *   in a `<div role=\"status\">` which is always rendered, and ensure that the MessageBar is\n   *   rendered either conditionally or with a delay.\n   * @default true\n   */\n  delayedRender?: boolean;\n}\n\n/**\n * {@docCategory MessageBar}\n */\nexport interface IMessageBarStyleProps {\n  /**\n   * Theme (provided through customization).\n   */\n  theme: ITheme;\n\n  /**\n   * Additional CSS class(es).\n   */\n  className?: string;\n\n  /**\n   * Type of the MessageBar.\n   */\n  messageBarType?: MessageBarType;\n\n  /**\n   * Whether the MessageBar contains a dismiss button.\n   */\n  onDismiss?: boolean;\n\n  /**\n   * Whether the text is truncated.\n   */\n  truncated?: boolean;\n\n  /**\n   * Whether the MessageBar is rendered in multi line (as opposed to single line) mode.\n   */\n  isMultiline?: boolean;\n\n  /**\n   * Whether the single line MessageBar is being expanded.\n   */\n  expandSingleLine?: boolean;\n\n  /**\n   * Whether the MessageBar contains any action elements.\n   */\n  actions?: boolean;\n}\n\n/**\n * {@docCategory MessageBar}\n */\nexport interface IMessageBarStyles {\n  /**\n   * Style set for the root element.\n   */\n  root?: IStyle;\n\n  /**\n   * Style set for the element containing the icon, text, and optional dismiss button.\n   */\n  content?: IStyle;\n\n  /**\n   * Style set for the element containing the icon.\n   */\n  iconContainer?: IStyle;\n\n  /**\n   * Style set for the icon.\n   */\n  icon?: IStyle;\n\n  /**\n   * Style set for the element containing the text.\n   */\n  text?: IStyle;\n\n  /**\n   * Style set for the text.\n   */\n  innerText?: IStyle;\n\n  /**\n   * Style set for the optional dismiss button.\n   */\n  dismissal?: IStyle;\n\n  /**\n   * Style set for the icon used to expand and collapse the MessageBar.\n   */\n  expand?: IStyle;\n\n  /**\n   * Style set for the element containing the dismiss button.\n   */\n  dismissSingleLine?: IStyle;\n\n  /**\n   * Style set for the element containing the expand icon.\n   */\n  expandSingleLine?: IStyle;\n\n  /**\n   * Style set for the optional element containing the action elements.\n   */\n  actions?: IStyle;\n}\n\n/**\n * {@docCategory MessageBar}\n */\nexport enum MessageBarType {\n  /** Info styled MessageBar */\n  info = 0,\n  /** Error styled MessageBar */\n  error = 1,\n  /** Blocked styled MessageBar */\n  blocked = 2,\n  /** SevereWarning styled MessageBar */\n  severeWarning = 3,\n  /** Success styled MessageBar */\n  success = 4,\n  /** Warning styled MessageBar */\n  warning = 5,\n}\n","import * as React from 'react';\nimport { getWindow } from './dom/getWindow';\n\n/**\n * DelayedRender component props.\n *\n * @public\n */\n// eslint-disable-next-line deprecation/deprecation\nexport interface IDelayedRenderProps extends React.Props<{}> {\n  /**\n   * Number of milliseconds to delay rendering children.\n   */\n  delay?: number;\n}\n\n/**\n * DelayedRender component state.\n *\n * @internal\n */\nexport interface IDelayedRenderState {\n  /**\n   * Whether the component is rendered or not.\n   */\n  isRendered: boolean;\n}\n\n/**\n * Utility component for delaying the render of a child component after a given delay. This component\n * requires a single child component; don't pass in many components. Wrap multiple components in a DIV\n * if necessary.\n *\n * @public\n * {@docCategory DelayedRender}\n */\nexport class DelayedRender extends React.Component<IDelayedRenderProps, IDelayedRenderState> {\n  public static defaultProps = {\n    delay: 0,\n  };\n\n  private _timeoutId: number | undefined;\n\n  constructor(props: IDelayedRenderProps) {\n    super(props);\n    this.state = {\n      isRendered: getWindow() === undefined,\n    };\n  }\n\n  public componentDidMount(): void {\n    let { delay } = this.props;\n    this._timeoutId = window.setTimeout(() => {\n      this.setState({\n        isRendered: true,\n      });\n    }, delay);\n  }\n\n  public componentWillUnmount(): void {\n    if (this._timeoutId) {\n      clearTimeout(this._timeoutId);\n    }\n  }\n\n  public render(): React.ReactElement<{}> | null {\n    return this.state.isRendered ? (React.Children.only(this.props.children) as React.ReactElement<{}>) : null;\n  }\n}\n"],"names":["window","__NEXT_P","push","KNOWN_FEATURES","AdbFeatures","observer","GlobalState","Stack","RouteStackProps","Head","title","MessageBar","span","br","code","ExternalLink","href","protocolVersion","toString","padStart","Separator","product","model","device","features","map","feature","index","TooltipHost","content","Icon","style","marginLeft","iconName","Icons","ICON_MAP","getClassNames","classNamesFunction","getAnnouncementPriority","messageBarType","getRole","MessageBarBase","props","ref","useBoolean","expandSingleLine","toggleExpandSingleLine","labelId","useId","actions","className","children","overflowButtonAriaLabel","dismissIconProps","styles","theme","onDismiss","undefined","isMultiline","truncated","dismissButtonAriaLabel","messageBarIconProps","role","delayedRender","expandButtonProps","nativeProps","classNames","expandIconProps","regionProps","actionsDiv","dismissButton","IconButton","disabled","dismissal","onClick","iconProps","ariaLabel","root","iconContainer","css","icon","text","id","innerText","DelayedRender","expand","dismissSingleLine","displayName","GlobalClassNames","error","blocked","severeWarning","success","warning","multiline","singleline","dismissalSingleLine","expandingSingleLine","actionsSingleline","backgroundColor","highContrastBackgroundColor","iconColor","styled","semanticColors","fonts","SmallScreenSelector","dismissalAndExpandIconStyle","fontSize","height","lineHeight","color","messageText","selectors","dismissalAndExpandStyle","inset","highContrastStyle","outlineOffset","outline","borderColor","flexShrink","width","padding","medium","background","minHeight","display","wordBreak","messageLink","messageLinkHovered","border","flexDirection","minWidth","margin","flexGrow","small","marginRight","paddingLeft","overflow","whiteSpace","textOverflow","flexBasis","alignItems","marginBottom","scope","MessageBarType","state","isRendered","componentDidMount","delay","this","_timeoutId","setTimeout","setState","componentWillUnmount","clearTimeout","render","defaultProps"],"sourceRoot":""}