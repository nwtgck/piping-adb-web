{"version":3,"file":"static/chunks/pages/bug-report-5b4fdacf078287a3.js","mappings":"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","sources":["webpack://_N_E/?b75b","webpack://_N_E/./src/pages/bug-report.tsx","webpack://_N_E/../../common/temp/node_modules/.pnpm/@fluentui+react@8.81.1_cktacisfg2p5lpuckvtl5f276a/node_modules/@fluentui/react/lib/components/src/components/MessageBar/MessageBar.base.tsx","webpack://_N_E/../../common/temp/node_modules/.pnpm/@fluentui+react@8.81.1_cktacisfg2p5lpuckvtl5f276a/node_modules/@fluentui/react/lib/components/src/components/MessageBar/MessageBar.styles.ts","webpack://_N_E/../../common/temp/node_modules/.pnpm/@fluentui+react@8.81.1_cktacisfg2p5lpuckvtl5f276a/node_modules/@fluentui/react/lib/components/src/components/MessageBar/MessageBar.tsx","webpack://_N_E/../../common/temp/node_modules/.pnpm/@fluentui+react@8.81.1_cktacisfg2p5lpuckvtl5f276a/node_modules/@fluentui/react/lib/components/src/components/MessageBar/MessageBar.types.ts","webpack://_N_E/../../common/temp/node_modules/.pnpm/@fluentui+utilities@8.9.0_wcklpcar7sgs6afjb4j5aji7wy/node_modules/@fluentui/utilities/src/DelayedRender.tsx"],"sourcesContent":["\n    (window.__NEXT_P = window.__NEXT_P || []).push([\n      \"/bug-report\",\n      function () {\n        return require(\"private-next-pages/bug-report.tsx\");\n      }\n    ]);\n    if(module.hot) {\n      module.hot.dispose(function () {\n        window.__NEXT_P.push([\"/bug-report\"])\n      });\n    }\n  ","// cspell: ignore bugreport\n// cspell: ignore bugreportz\n\nimport { MessageBar, MessageBarType, PrimaryButton, Stack, StackItem } from \"@fluentui/react\";\nimport { BugReport, BugReportZ, BugReportZVersion } from \"@yume-chan/android-bin\";\nimport { action, autorun, makeAutoObservable, observable, runInAction } from \"mobx\";\nimport { observer } from \"mobx-react-lite\";\nimport { NextPage } from \"next\";\nimport Head from \"next/head\";\nimport { GlobalState } from \"../state\";\nimport { RouteStackProps, saveFile } from \"../utils\";\n\nclass BugReportState {\n    bugReport: BugReport | undefined = undefined;\n\n    bugReportZ: BugReportZ | undefined = undefined;\n\n    bugReportZVersion: BugReportZVersion | undefined = undefined;\n\n    bugReportZInProgress = false;\n\n    bugReportZProgress: string | undefined = undefined;\n\n    bugReportZTotalSize: string | undefined = undefined;\n\n    constructor() {\n        makeAutoObservable(this, {\n            bugReportZVersion: observable.deep,\n            generateBugReport: action.bound,\n            generateBugReportZStream: action.bound,\n            generateBugReportZ: action.bound,\n        });\n\n        autorun(() => {\n            if (GlobalState.device) {\n                runInAction(() => {\n                    this.bugReport = new BugReport(GlobalState.device!);\n                    this.bugReportZ = new BugReportZ(GlobalState.device!);\n\n                    this.bugReportZ.version().then(action(version => {\n                        this.bugReportZVersion = version;\n                    }));\n                });\n            } else {\n                runInAction(() => {\n                    this.bugReport = undefined;\n                    this.bugReportZ = undefined;\n                    this.bugReportZVersion = undefined;\n                });\n            }\n        });\n    }\n\n    async generateBugReport() {\n        await this.bugReport!.generate()\n            .pipeTo(saveFile('bugreport.txt'));\n    }\n\n    async generateBugReportZStream() {\n        await this.bugReportZ!.stream()\n            .pipeTo(saveFile('bugreport.zip'));\n    }\n\n    async generateBugReportZ() {\n        runInAction(() => {\n            this.bugReportZInProgress = true;\n        });\n\n        const filename = await this.bugReportZ!.generate(\n            this.bugReportZVersion!.supportProgress\n                ? action((progress, total) => {\n                    this.bugReportZProgress = progress;\n                    this.bugReportZTotalSize = total;\n                })\n                : undefined\n        );\n\n        const sync = await GlobalState.device!.sync();\n        await sync.read(filename)\n            .pipeTo(saveFile('bugreport.zip'));\n\n        sync.dispose();\n\n        runInAction(() => {\n            this.bugReportZInProgress = false;\n            this.bugReportZProgress = undefined;\n            this.bugReportZTotalSize = undefined;\n        });\n    }\n}\n\nconst state = new BugReportState();\n\nconst BugReportPage: NextPage = () => {\n    return (\n        <Stack {...RouteStackProps}>\n            <Head>\n                <title>BugReport - Android Web Toolbox</title>\n            </Head>\n\n            <MessageBar messageBarType={MessageBarType.info}>This is the `bugreport`/`bugreportz` tool in Android</MessageBar>\n\n            <StackItem>\n                <PrimaryButton\n                    disabled={!state.bugReport}\n                    text=\"Generate BugReport\"\n                    onClick={state.generateBugReport}\n                />\n            </StackItem>\n\n            <StackItem>\n                <PrimaryButton\n                    disabled={!state.bugReportZVersion?.supportStream}\n                    text=\"Generate Zipped BugReport (Streaming)\"\n                    onClick={state.generateBugReportZStream}\n                />\n            </StackItem>\n\n            <StackItem>\n                <Stack horizontal verticalAlign=\"center\" tokens={{ childrenGap: 8 }}>\n                    <StackItem>\n                        <PrimaryButton\n                            disabled={!state.bugReportZVersion || state.bugReportZInProgress}\n                            text=\"Generate Zipped BugReport\"\n                            onClick={state.generateBugReportZ}\n                        />\n                    </StackItem>\n\n                    {state.bugReportZInProgress && (\n                        <StackItem>\n                            {state.bugReportZTotalSize ? (\n                                <span>\n                                    Progress: {state.bugReportZProgress} / {state.bugReportZTotalSize}\n                                </span>\n                            ) : (\n                                <span>\n                                    Generating... Please wait\n                                    {!state.bugReportZVersion!.supportProgress && ' (this device does not support progress)'}\n                                </span>\n                            )}\n                        </StackItem>\n                    )}\n                </Stack>\n            </StackItem>\n        </Stack>\n    );\n};\n\nexport default observer(BugReportPage);\n","import * as React from 'react';\nimport { DelayedRender, classNamesFunction, getNativeProps, htmlElementProperties, css } from '../../Utilities';\nimport { IconButton } from '../../Button';\nimport { Icon } from '../../Icon';\nimport { MessageBarType } from './MessageBar.types';\nimport { useId, useBoolean } from '@fluentui/react-hooks';\nimport type { IMessageBarProps, IMessageBarStyleProps, IMessageBarStyles } from './MessageBar.types';\n\nconst ICON_MAP = {\n  [MessageBarType.info]: 'Info',\n  [MessageBarType.warning]: 'Info',\n  [MessageBarType.error]: 'ErrorBadge',\n  [MessageBarType.blocked]: 'Blocked2',\n  [MessageBarType.severeWarning]: 'Warning',\n  [MessageBarType.success]: 'Completed',\n};\n\nconst COMPONENT_NAME = 'MessageBar';\n\nconst getClassNames = classNamesFunction<IMessageBarStyleProps, IMessageBarStyles>();\n\nconst getAnnouncementPriority = (messageBarType: MessageBarType): 'assertive' | 'polite' => {\n  switch (messageBarType) {\n    case MessageBarType.blocked:\n    case MessageBarType.error:\n    case MessageBarType.severeWarning:\n      return 'assertive';\n  }\n  return 'polite';\n};\n\nconst getRole = (messageBarType: MessageBarType): 'alert' | 'status' => {\n  switch (messageBarType) {\n    case MessageBarType.blocked:\n    case MessageBarType.error:\n    case MessageBarType.severeWarning:\n      return 'alert';\n  }\n  return 'status';\n};\n\nexport const MessageBarBase: React.FunctionComponent<IMessageBarProps> = React.forwardRef<\n  HTMLDivElement,\n  IMessageBarProps\n>((props, ref) => {\n  const [expandSingleLine, { toggle: toggleExpandSingleLine }] = useBoolean(false);\n  const labelId = useId('MessageBar');\n\n  const {\n    actions,\n    className,\n    children,\n    // eslint-disable-next-line deprecation/deprecation\n    overflowButtonAriaLabel,\n    dismissIconProps,\n    styles,\n    theme,\n    messageBarType = MessageBarType.info,\n    onDismiss = undefined,\n    isMultiline = true,\n    truncated,\n    dismissButtonAriaLabel,\n    messageBarIconProps,\n    role,\n    delayedRender = true,\n    expandButtonProps,\n  } = props;\n\n  const nativeProps = getNativeProps<React.HTMLAttributes<HTMLSpanElement>>(props, htmlElementProperties, [\n    'className',\n    'role',\n  ]);\n\n  const classNames: { [key in keyof IMessageBarStyles]: string } = getClassNames(styles, {\n    theme: theme!,\n    messageBarType: messageBarType || MessageBarType.info,\n    onDismiss: onDismiss !== undefined,\n    actions: actions !== undefined,\n    truncated: truncated,\n    isMultiline: isMultiline,\n    expandSingleLine: expandSingleLine,\n    className,\n  });\n\n  const expandIconProps = { iconName: expandSingleLine ? 'DoubleChevronUp' : 'DoubleChevronDown' };\n  const regionProps = actions || onDismiss ? { 'aria-describedby': labelId, role: 'region' } : {};\n  const actionsDiv = actions ? <div className={classNames.actions}>{actions}</div> : null;\n\n  const dismissButton = onDismiss ? (\n    <IconButton\n      disabled={false}\n      className={classNames.dismissal}\n      onClick={onDismiss}\n      iconProps={dismissIconProps ? dismissIconProps : { iconName: 'Clear' }}\n      title={dismissButtonAriaLabel}\n      ariaLabel={dismissButtonAriaLabel}\n    />\n  ) : null;\n\n  return (\n    <div ref={ref} className={classNames.root} {...regionProps}>\n      <div className={classNames.content}>\n        <div className={classNames.iconContainer} aria-hidden>\n          {messageBarIconProps ? (\n            <Icon {...messageBarIconProps} className={css(classNames.icon, messageBarIconProps.className)} />\n          ) : (\n            <Icon iconName={ICON_MAP[messageBarType!]} className={classNames.icon} />\n          )}\n        </div>\n        <div\n          className={classNames.text}\n          id={labelId}\n          role={role || getRole(messageBarType)}\n          aria-live={getAnnouncementPriority(messageBarType)}\n        >\n          <span className={classNames.innerText} {...nativeProps}>\n            {delayedRender ? (\n              <DelayedRender>\n                <span>{children}</span>\n              </DelayedRender>\n            ) : (\n              // this span is probably not necessary, but preserving it for now in case anyone\n              // has styling that expects it to be present\n              <span>{children}</span>\n            )}\n          </span>\n        </div>\n        {\n          /* singleline expand/collapse button */ !isMultiline && !actionsDiv && truncated && (\n            <div className={classNames.expandSingleLine}>\n              <IconButton\n                disabled={false}\n                className={classNames.expand}\n                onClick={toggleExpandSingleLine}\n                iconProps={expandIconProps}\n                ariaLabel={overflowButtonAriaLabel}\n                aria-expanded={expandSingleLine}\n                {...expandButtonProps}\n              />\n            </div>\n          )\n        }\n        {/* singleline actions */ !isMultiline && actionsDiv}\n        {\n          /* singleline dismiss */ !isMultiline && dismissButton && (\n            <div className={classNames.dismissSingleLine}>{dismissButton}</div>\n          )\n        }\n        {/* multiline dismiss */ isMultiline && dismissButton}\n      </div>\n      {/* multiline actions */ isMultiline && actionsDiv}\n    </div>\n  );\n});\nMessageBarBase.displayName = COMPONENT_NAME;\n","import {\n  HighContrastSelector,\n  ScreenWidthMaxSmall,\n  getScreenSelector,\n  getGlobalClassNames,\n  getFocusStyle,\n  IconFontSizes,\n  getHighContrastNoAdjustStyle,\n} from '../../Styling';\nimport { MessageBarType } from './MessageBar.types';\nimport type { IStyle, ISemanticColors } from '../../Styling';\nimport type { IMessageBarStyleProps, IMessageBarStyles } from './MessageBar.types';\n\nconst GlobalClassNames = {\n  root: 'ms-MessageBar',\n  error: 'ms-MessageBar--error',\n  blocked: 'ms-MessageBar--blocked',\n  severeWarning: 'ms-MessageBar--severeWarning',\n  success: 'ms-MessageBar--success',\n  warning: 'ms-MessageBar--warning',\n  multiline: 'ms-MessageBar-multiline',\n  singleline: 'ms-MessageBar-singleline',\n  dismissalSingleLine: 'ms-MessageBar-dismissalSingleLine',\n  expandingSingleLine: 'ms-MessageBar-expandingSingleLine',\n  content: 'ms-MessageBar-content',\n  iconContainer: 'ms-MessageBar-icon',\n  text: 'ms-MessageBar-text',\n  innerText: 'ms-MessageBar-innerText',\n  dismissSingleLine: 'ms-MessageBar-dismissSingleLine',\n  expandSingleLine: 'ms-MessageBar-expandSingleLine',\n  dismissal: 'ms-MessageBar-dismissal',\n  expand: 'ms-MessageBar-expand',\n  actions: 'ms-MessageBar-actions',\n  actionsSingleline: 'ms-MessageBar-actionsSingleLine',\n};\n\nconst backgroundColor: { [key: string]: keyof ISemanticColors } = {\n  [MessageBarType.error]: 'errorBackground',\n  [MessageBarType.blocked]: 'errorBackground',\n  [MessageBarType.success]: 'successBackground',\n  [MessageBarType.warning]: 'warningBackground',\n  [MessageBarType.severeWarning]: 'severeWarningBackground',\n  [MessageBarType.info]: 'infoBackground',\n};\n\nconst highContrastBackgroundColor: { [key: string]: string } = {\n  [MessageBarType.error]: 'rgba(255, 0, 0, 0.3)',\n  [MessageBarType.blocked]: 'rgba(255, 0, 0, 0.3)',\n  [MessageBarType.success]: 'rgba(48, 241, 73, 0.3)',\n  [MessageBarType.warning]: 'rgba(255, 254, 57, 0.3)',\n  [MessageBarType.severeWarning]: 'rgba(255, 0, 0, 0.3)',\n  [MessageBarType.info]: 'Window',\n};\n\nconst iconColor: { [key: string]: keyof ISemanticColors } = {\n  [MessageBarType.error]: 'errorIcon',\n  [MessageBarType.blocked]: 'errorIcon',\n  [MessageBarType.success]: 'successIcon',\n  [MessageBarType.warning]: 'warningIcon',\n  [MessageBarType.severeWarning]: 'severeWarningIcon',\n  [MessageBarType.info]: 'infoIcon',\n};\n\nexport const getStyles = (props: IMessageBarStyleProps): IMessageBarStyles => {\n  const {\n    theme,\n    className,\n    onDismiss,\n    truncated,\n    isMultiline,\n    expandSingleLine,\n    messageBarType = MessageBarType.info,\n  } = props;\n  const { semanticColors, fonts } = theme;\n\n  const SmallScreenSelector = getScreenSelector(0, ScreenWidthMaxSmall);\n\n  const classNames = getGlobalClassNames(GlobalClassNames, theme);\n\n  const dismissalAndExpandIconStyle: IStyle = {\n    fontSize: IconFontSizes.xSmall,\n    height: 10,\n    lineHeight: '10px',\n    color: semanticColors.messageText,\n    selectors: {\n      [HighContrastSelector]: {\n        ...getHighContrastNoAdjustStyle(),\n        color: 'WindowText',\n      },\n    },\n  };\n\n  const dismissalAndExpandStyle: IStyle = [\n    getFocusStyle(theme, {\n      inset: 1,\n      highContrastStyle: {\n        outlineOffset: '-6px',\n        outline: '1px solid Highlight',\n      },\n      borderColor: 'transparent',\n    }),\n    {\n      flexShrink: 0,\n      width: 32,\n      height: 32,\n      padding: '8px 12px',\n      selectors: {\n        '& .ms-Button-icon': dismissalAndExpandIconStyle,\n        ':hover': {\n          backgroundColor: 'transparent',\n        },\n        ':active': {\n          backgroundColor: 'transparent',\n        },\n      },\n    },\n  ];\n\n  return {\n    root: [\n      classNames.root,\n      fonts.medium,\n      messageBarType === MessageBarType.error && classNames.error,\n      messageBarType === MessageBarType.blocked && classNames.blocked,\n      messageBarType === MessageBarType.severeWarning && classNames.severeWarning,\n      messageBarType === MessageBarType.success && classNames.success,\n      messageBarType === MessageBarType.warning && classNames.warning,\n      isMultiline ? classNames.multiline : classNames.singleline,\n      !isMultiline && onDismiss && classNames.dismissalSingleLine,\n      !isMultiline && truncated && classNames.expandingSingleLine,\n      {\n        background: semanticColors[backgroundColor[messageBarType]],\n        color: semanticColors.messageText,\n        minHeight: 32,\n        width: '100%',\n        display: 'flex',\n        wordBreak: 'break-word',\n        selectors: {\n          '.ms-Link': {\n            color: semanticColors.messageLink,\n            selectors: {\n              ':hover': {\n                color: semanticColors.messageLinkHovered,\n              },\n            },\n          },\n          [HighContrastSelector]: {\n            ...getHighContrastNoAdjustStyle(),\n            background: highContrastBackgroundColor[messageBarType],\n            border: '1px solid WindowText',\n            color: 'WindowText',\n          },\n        },\n      },\n      isMultiline && {\n        flexDirection: 'column',\n      },\n      className,\n    ],\n    content: [\n      classNames.content,\n      {\n        display: 'flex',\n        width: '100%',\n        lineHeight: 'normal',\n      },\n    ],\n    iconContainer: [\n      classNames.iconContainer,\n      {\n        fontSize: IconFontSizes.medium,\n        minWidth: 16,\n        minHeight: 16,\n        display: 'flex',\n        flexShrink: 0,\n        margin: '8px 0 8px 12px',\n      },\n    ],\n    icon: {\n      color: semanticColors[iconColor[messageBarType]],\n      selectors: {\n        [HighContrastSelector]: {\n          ...getHighContrastNoAdjustStyle(),\n          color: 'WindowText',\n        },\n      },\n    },\n    text: [\n      classNames.text,\n      {\n        minWidth: 0,\n        display: 'flex',\n        flexGrow: 1,\n        margin: 8,\n        ...fonts.small,\n        selectors: {\n          [HighContrastSelector]: {\n            ...getHighContrastNoAdjustStyle(),\n          },\n        },\n      },\n      !onDismiss && {\n        marginRight: 12,\n      },\n    ],\n    innerText: [\n      classNames.innerText,\n      {\n        lineHeight: 16,\n        selectors: {\n          '& span a:last-child': {\n            paddingLeft: 4,\n          },\n        },\n      },\n      truncated && {\n        overflow: 'visible',\n        whiteSpace: 'pre-wrap',\n      },\n      !isMultiline && {\n        // In high contrast this causes the top and bottom of links' focus outline to be clipped\n        // (not sure of a good way around that while still maintaining text clipping)\n        overflow: 'hidden',\n        textOverflow: 'ellipsis',\n        whiteSpace: 'nowrap',\n      },\n      !isMultiline &&\n        !truncated && {\n          selectors: {\n            [SmallScreenSelector]: {\n              overflow: 'visible',\n              whiteSpace: 'pre-wrap',\n            },\n          },\n        },\n      expandSingleLine && {\n        overflow: 'visible',\n        whiteSpace: 'pre-wrap',\n      },\n    ],\n    dismissSingleLine: classNames.dismissSingleLine,\n    expandSingleLine: classNames.expandSingleLine,\n    dismissal: [classNames.dismissal, dismissalAndExpandStyle],\n    expand: [classNames.expand, dismissalAndExpandStyle],\n    actions: [\n      isMultiline ? classNames.actions : classNames.actionsSingleline,\n      {\n        display: 'flex',\n        flexGrow: 0,\n        flexShrink: 0,\n        flexBasis: 'auto',\n        flexDirection: 'row-reverse',\n        alignItems: 'center',\n        margin: '0 12px 0 8px',\n        selectors: {\n          '& button:nth-child(n+2)': {\n            marginLeft: 8,\n          },\n        },\n      },\n      isMultiline && {\n        marginBottom: 8,\n      },\n      onDismiss &&\n        !isMultiline && {\n          marginRight: 0,\n        },\n    ],\n  };\n};\n","import * as React from 'react';\nimport { styled } from '../../Utilities';\nimport { MessageBarBase } from './MessageBar.base';\nimport { getStyles } from './MessageBar.styles';\nimport type { IMessageBarProps, IMessageBarStyleProps, IMessageBarStyles } from './MessageBar.types';\n\nexport const MessageBar: React.FunctionComponent<IMessageBarProps> = styled<\n  IMessageBarProps,\n  IMessageBarStyleProps,\n  IMessageBarStyles\n>(MessageBarBase, getStyles, undefined, {\n  scope: 'MessageBar',\n});\n","import * as React from 'react';\nimport { BaseButton, Button, IButtonProps } from '../../Button';\nimport type { ITheme, IStyle } from '../../Styling';\nimport type { IRefObject, IStyleFunctionOrObject } from '../../Utilities';\nimport type { IIconProps } from '../../Icon';\n\n/**\n * {@docCategory MessageBar}\n */\nexport interface IMessageBar {}\n\n/**\n * {@docCategory MessageBar}\n */\nexport interface IMessageBarProps extends React.HTMLAttributes<HTMLElement>, React.RefAttributes<HTMLDivElement> {\n  /**\n   * Optional callback to access the IMessageBar interface. Use this instead of ref for accessing\n   * the public methods and properties of the component.\n   */\n  componentRef?: IRefObject<IMessageBar>;\n\n  /**\n   * The type of MessageBar to render.\n   * @defaultvalue MessageBarType.info\n   */\n  messageBarType?: MessageBarType;\n\n  /**\n   * The actions you want to show on the other side.\n   */\n  actions?: JSX.Element;\n\n  /**\n   * A description of the message bar for the benefit of screen readers.\n   * @deprecated Use native prop `aria-label` instead.\n   */\n  ariaLabel?: string;\n\n  /**\n   * Whether the message bar has a dismiss button and its callback.\n   * If null, we don't show a dismiss button.\n   * @defaultvalue null\n   */\n  // eslint-disable-next-line deprecation/deprecation\n  onDismiss?: (ev?: React.MouseEvent<HTMLElement | BaseButton | Button>) => any;\n\n  /**\n   * Determines if the message bar is multi lined.\n   * If false, and the text overflows over buttons or to another line, it is clipped.\n   * @defaultvalue true\n   */\n  isMultiline?: boolean;\n\n  /**\n   * Aria label on dismiss button if onDismiss is defined.\n   */\n  dismissButtonAriaLabel?: string;\n\n  /**\n   * Determines if the message bar text is truncated.\n   * If true, a button will render to toggle between a single line view and multiline view.\n   * This prop is for single line message bars with no buttons only in a limited space scenario.\n   * @defaultvalue false\n   */\n  truncated?: boolean;\n\n  /**\n   * Aria label on overflow button if truncated is defined.\n   * @deprecated Use `expandButtonProps` instead.\n   */\n  overflowButtonAriaLabel?: string;\n\n  /**\n   * Additional CSS class(es) to apply to the MessageBar.\n   */\n  className?: string;\n\n  /**\n   * Theme (provided through customization.)\n   */\n  theme?: ITheme;\n\n  /**\n   * Call to provide customized styling that will layer on top of the variant rules.\n   */\n  styles?: IStyleFunctionOrObject<IMessageBarStyleProps, IMessageBarStyles>;\n\n  /**\n   * Custom icon prop to replace the dismiss icon.\n   * If unset, default will be the Fabric Clear icon.\n   */\n  dismissIconProps?: IIconProps;\n\n  /**\n   * Custom icon prop to replace the message bar icon.\n   * If unset, default will be the icon set by messageBarType.\n   */\n  messageBarIconProps?: IIconProps;\n\n  /**\n   *  Button props that can be applied to the expand button of the MessageBar.\n   */\n  expandButtonProps?: IButtonProps;\n\n  /**\n   * Custom role to apply to the MessageBar.\n   * @defaultvalue `alert` if `messageBarType` is `error`, `blocked`, or `severeWarning`;\n   * or `status` otherwise\n   */\n  role?: 'alert' | 'status' | 'none';\n\n  /**\n   * By default, MessageBar delay-renders its content within an internal live region to help ensure\n   * it's announced by screen readers. You can disable that behavior by setting this prop to `false`.\n   *\n   * If you set this prop to `false`, to ensure proper announcement you should either:\n   * - If appropriate, ensure that the `role` prop is set to `alert` (this will be done by default\n   *   if `messageBarType` is `error`, `blocked`, or `severeWarning`), OR\n   * - Set the `role` prop to `none` (to avoid nested `status` regions), wrap the whole MessageBar\n   *   in a `<div role=\"status\">` which is always rendered, and ensure that the MessageBar is\n   *   rendered either conditionally or with a delay.\n   * @default true\n   */\n  delayedRender?: boolean;\n}\n\n/**\n * {@docCategory MessageBar}\n */\nexport interface IMessageBarStyleProps {\n  /**\n   * Theme (provided through customization).\n   */\n  theme: ITheme;\n\n  /**\n   * Additional CSS class(es).\n   */\n  className?: string;\n\n  /**\n   * Type of the MessageBar.\n   */\n  messageBarType?: MessageBarType;\n\n  /**\n   * Whether the MessageBar contains a dismiss button.\n   */\n  onDismiss?: boolean;\n\n  /**\n   * Whether the text is truncated.\n   */\n  truncated?: boolean;\n\n  /**\n   * Whether the MessageBar is rendered in multi line (as opposed to single line) mode.\n   */\n  isMultiline?: boolean;\n\n  /**\n   * Whether the single line MessageBar is being expanded.\n   */\n  expandSingleLine?: boolean;\n\n  /**\n   * Whether the MessageBar contains any action elements.\n   */\n  actions?: boolean;\n}\n\n/**\n * {@docCategory MessageBar}\n */\nexport interface IMessageBarStyles {\n  /**\n   * Style set for the root element.\n   */\n  root?: IStyle;\n\n  /**\n   * Style set for the element containing the icon, text, and optional dismiss button.\n   */\n  content?: IStyle;\n\n  /**\n   * Style set for the element containing the icon.\n   */\n  iconContainer?: IStyle;\n\n  /**\n   * Style set for the icon.\n   */\n  icon?: IStyle;\n\n  /**\n   * Style set for the element containing the text.\n   */\n  text?: IStyle;\n\n  /**\n   * Style set for the text.\n   */\n  innerText?: IStyle;\n\n  /**\n   * Style set for the optional dismiss button.\n   */\n  dismissal?: IStyle;\n\n  /**\n   * Style set for the icon used to expand and collapse the MessageBar.\n   */\n  expand?: IStyle;\n\n  /**\n   * Style set for the element containing the dismiss button.\n   */\n  dismissSingleLine?: IStyle;\n\n  /**\n   * Style set for the element containing the expand icon.\n   */\n  expandSingleLine?: IStyle;\n\n  /**\n   * Style set for the optional element containing the action elements.\n   */\n  actions?: IStyle;\n}\n\n/**\n * {@docCategory MessageBar}\n */\nexport enum MessageBarType {\n  /** Info styled MessageBar */\n  info = 0,\n  /** Error styled MessageBar */\n  error = 1,\n  /** Blocked styled MessageBar */\n  blocked = 2,\n  /** SevereWarning styled MessageBar */\n  severeWarning = 3,\n  /** Success styled MessageBar */\n  success = 4,\n  /** Warning styled MessageBar */\n  warning = 5,\n}\n","import * as React from 'react';\nimport { getWindow } from './dom/getWindow';\n\n/**\n * DelayedRender component props.\n *\n * @public\n */\n// eslint-disable-next-line deprecation/deprecation\nexport interface IDelayedRenderProps extends React.Props<{}> {\n  /**\n   * Number of milliseconds to delay rendering children.\n   */\n  delay?: number;\n}\n\n/**\n * DelayedRender component state.\n *\n * @internal\n */\nexport interface IDelayedRenderState {\n  /**\n   * Whether the component is rendered or not.\n   */\n  isRendered: boolean;\n}\n\n/**\n * Utility component for delaying the render of a child component after a given delay. This component\n * requires a single child component; don't pass in many components. Wrap multiple components in a DIV\n * if necessary.\n *\n * @public\n * {@docCategory DelayedRender}\n */\nexport class DelayedRender extends React.Component<IDelayedRenderProps, IDelayedRenderState> {\n  public static defaultProps = {\n    delay: 0,\n  };\n\n  private _timeoutId: number | undefined;\n\n  constructor(props: IDelayedRenderProps) {\n    super(props);\n    this.state = {\n      isRendered: getWindow() === undefined,\n    };\n  }\n\n  public componentDidMount(): void {\n    let { delay } = this.props;\n    this._timeoutId = window.setTimeout(() => {\n      this.setState({\n        isRendered: true,\n      });\n    }, delay);\n  }\n\n  public componentWillUnmount(): void {\n    if (this._timeoutId) {\n      clearTimeout(this._timeoutId);\n    }\n  }\n\n  public render(): React.ReactElement<{}> | null {\n    return this.state.isRendered ? (React.Children.only(this.props.children) as React.ReactElement<{}>) : null;\n  }\n}\n"],"names":["window","__NEXT_P","push","state","BugReportState","bugReport","undefined","bugReportZ","bugReportZVersion","bugReportZInProgress","bugReportZProgress","bugReportZTotalSize","makeAutoObservable","this","observable","generateBugReport","action","generateBugReportZStream","generateBugReportZ","autorun","GlobalState","runInAction","BugReport","BugReportZ","version","then","generate","pipeTo","saveFile","stream","filename","sync","supportProgress","progress","total","read","dispose","observer","Stack","RouteStackProps","Head","title","MessageBar","messageBarType","MessageBarType","StackItem","PrimaryButton","disabled","text","onClick","supportStream","horizontal","verticalAlign","tokens","childrenGap","span","ICON_MAP","getClassNames","classNamesFunction","getAnnouncementPriority","getRole","MessageBarBase","props","ref","useBoolean","expandSingleLine","toggleExpandSingleLine","labelId","useId","actions","className","children","overflowButtonAriaLabel","dismissIconProps","styles","theme","onDismiss","isMultiline","truncated","dismissButtonAriaLabel","messageBarIconProps","role","delayedRender","expandButtonProps","nativeProps","classNames","expandIconProps","iconName","regionProps","actionsDiv","dismissButton","IconButton","dismissal","iconProps","ariaLabel","root","content","iconContainer","Icon","css","icon","id","innerText","DelayedRender","expand","dismissSingleLine","displayName","GlobalClassNames","error","blocked","severeWarning","success","warning","multiline","singleline","dismissalSingleLine","expandingSingleLine","actionsSingleline","backgroundColor","highContrastBackgroundColor","iconColor","styled","semanticColors","fonts","SmallScreenSelector","dismissalAndExpandIconStyle","fontSize","height","lineHeight","color","messageText","selectors","dismissalAndExpandStyle","inset","highContrastStyle","outlineOffset","outline","borderColor","flexShrink","width","padding","medium","background","minHeight","display","wordBreak","messageLink","messageLinkHovered","border","flexDirection","minWidth","margin","flexGrow","small","marginRight","paddingLeft","overflow","whiteSpace","textOverflow","flexBasis","alignItems","marginLeft","marginBottom","scope","isRendered","componentDidMount","delay","_timeoutId","setTimeout","setState","componentWillUnmount","clearTimeout","render","defaultProps"],"sourceRoot":""}