{"version":3,"file":"static/chunks/pages/logcat-c1071046c3e3da33.js","mappings":"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","sources":["webpack://_N_E/?7773","webpack://_N_E/../../libraries/b-tree/src/index.ts","webpack://_N_E/./src/pages/logcat.tsx"],"sourcesContent":["\n    (window.__NEXT_P = window.__NEXT_P || []).push([\n      \"/logcat\",\n      function () {\n        return require(\"private-next-pages/logcat.tsx\");\n      }\n    ]);\n    if(module.hot) {\n      module.hot.dispose(function () {\n        window.__NEXT_P.push([\"/logcat\"])\n      });\n    }\n  ","interface BTreeInsertionResult {\n    key: number;\n    child: BTreeNode;\n}\n\nfunction insert(array: Int32Array, length: number, value: number, index: number) {\n    if (index !== length) {\n        array.set(array.subarray(index, length), index + 1);\n    }\n    array[index] = value;\n}\n\nfunction remove(array: Int32Array, length: number, index: number) {\n    if (index < length - 1) {\n        array.set(array.subarray(index + 1, length), index);\n    }\n}\n\nexport class BTreeNode {\n    order: number;\n    mid: number;\n    minKeyCount: number;\n\n    keys: Int32Array;\n    keyCount: number;\n\n    height: number;\n    children: BTreeNode[];\n\n    public constructor(\n        order: number,\n        keys: Int32Array,\n        keyCount: number,\n        height: number,\n        children: BTreeNode[]\n    ) {\n        this.order = order;\n        this.mid = this.order >> 1;\n        // Math.ceil(order / 2) - 1\n        this.minKeyCount = ((this.order + 1) >> 1) - 1;\n\n        this.keys = keys;\n        this.keyCount = keyCount;\n\n        this.height = height;\n        this.children = children;\n    }\n\n    /**\n     * Split the current node into two\n     * @param value The key to be inserted.\n     * @param index The index of the key to be inserted at.\n     * @param child The child (right to the key) to be inserted. May be undefined when current node is a leaf.\n     * @returns The new key and child need to be inserted to its parent.\n     * The new key is the middle key of the current node, and the child contains the right half of the current node.\n     */\n    protected split(value: number, index: number, child?: BTreeNode): BTreeInsertionResult {\n        let middleKey: number;\n        const rightKeys = new Int32Array(this.order - 1);\n        let rightChildren: BTreeNode[];\n\n        if (index < this.mid) {\n            middleKey = this.keys[this.mid - 1]!;\n            rightKeys.set(this.keys.subarray(this.mid), 0);\n\n            insert(this.keys, this.mid - 1, value, index);\n\n            if (child) {\n                // internal node\n                rightChildren = this.children.splice(this.mid, this.order - this.mid);\n                // TODO: this may cause the underlying array to grow (re-alloc and copy)\n                // investigate if this hurts performance.\n                this.children.splice(index + 1, 0, child);\n            } else {\n                // leaf node, doesn't have children, create am empty array for it.\n                rightChildren = new Array(this.order);\n            }\n        } else {\n            if (index === this.mid) {\n                middleKey = value;\n                rightKeys.set(this.keys.subarray(this.mid), 0);\n            } else {\n                middleKey = this.keys[this.mid]!;\n                if (index !== this.mid + 1) {\n                    rightKeys.set(this.keys.subarray(this.mid + 1, index), 0);\n                }\n                rightKeys[index - this.mid - 1] = value;\n                rightKeys.set(this.keys.subarray(index), index - this.mid);\n            }\n\n            if (child) {\n                rightChildren = this.children.splice(this.mid + 1, this.order - this.mid - 1);\n                rightChildren.splice(index - this.mid, 0, child);\n            } else {\n                rightChildren = new Array(this.order);\n            }\n        }\n\n        this.keyCount = this.mid;\n        return {\n            key: middleKey,\n            child: new BTreeNode(\n                this.order,\n                rightKeys,\n                this.order - 1 - this.mid,\n                this.height,\n                rightChildren\n            ),\n        };\n    }\n\n    public search(value: number): number {\n        let start = 0;\n        let end = this.keyCount - 1;\n        while (start <= end) {\n            const mid = (start + end) >> 1;\n            if (this.keys[mid] === value) {\n                return mid;\n            } else if (this.keys[mid]! < value) {\n                start = mid + 1;\n            } else {\n                end = mid - 1;\n            }\n        }\n        return ~start;\n    }\n\n    public has(value: number): boolean {\n        let index = this.search(value);\n        if (index >= 0) {\n            return true;\n        }\n        if (this.height > 0) {\n            index = ~index;\n            return this.children[index]!.has(value);\n        }\n        return false;\n    }\n\n    public add(value: number): BTreeInsertionResult | boolean {\n        let index = this.search(value);\n        if (index >= 0) {\n            return false;\n        }\n\n        index = ~index;\n\n        if (this.height === 0) {\n            if (this.keyCount === this.order - 1) {\n                return this.split(value, index);\n            }\n\n            insert(this.keys, this.keyCount, value, index);\n            this.keyCount += 1;\n            return true;\n        }\n\n        const split = this.children[index]!.add(value);\n        if (typeof split === 'object') {\n            if (this.keyCount === this.order - 1) {\n                return this.split(split.key, index, split.child);\n            }\n\n            insert(this.keys, this.keyCount, split.key, index);\n            this.keyCount += 1;\n\n            this.children.splice(index + 1, 0, split.child);\n        }\n\n        return true;\n    }\n\n    public delete(value: number): boolean {\n        let index = this.search(value);\n        if (index >= 0) {\n            this.deleteAt(index);\n            return true;\n        }\n\n        if (this.height > 0) {\n            index = ~index;\n            const deleted = this.children[index]!.delete(value);\n            if (deleted) {\n                this.balance(index);\n            }\n            return deleted;\n        }\n\n        return false;\n    }\n\n    public max(): number {\n        if (this.height === 0) {\n            return this.keys[this.keyCount - 1]!;\n        }\n        return this.children[this.keyCount]!.max();\n    }\n\n    protected balance(index: number) {\n        const child = this.children[index]!;\n\n        if (child.keyCount >= this.minKeyCount) {\n            return;\n        }\n\n        if (index > 0) {\n            const left = this.children[index - 1]!;\n            if (left.keyCount > this.minKeyCount) {\n                // rotate right\n                insert(child.keys, child.keyCount, this.keys[index - 1]!, 0);\n                if (this.height > 1) {\n                    child.children.splice(0, 0, left.children[left.keyCount]!);\n                }\n                child.keyCount += 1;\n\n                this.keys[index - 1] = left.keys[left.keyCount - 1]!;\n                left.keyCount -= 1;\n                return;\n            }\n\n            // merge with left\n            left.keys[left.keyCount] = this.keys[index - 1]!;\n            left.keyCount += 1;\n            left.keys.set(child.keys.subarray(0, child.keyCount), left.keyCount);\n            if (this.height > 1) {\n                for (let i = 0; i <= child.keyCount; i++) {\n                    left.children[left.keyCount + i] = child.children[i]!;\n                }\n            }\n            left.keyCount += child.keyCount;\n            remove(this.keys, this.keyCount, index - 1);\n            this.children.splice(index, 1);\n            this.keyCount -= 1;\n            return;\n        }\n\n        const right = this.children[index + 1]!;\n        if (right.keyCount > this.minKeyCount) {\n            // rotate left\n            child.keys[child.keyCount] = this.keys[index]!;\n            if (this.height > 1) {\n                child.children[child.keyCount + 1] = right.children.splice(0, 1)[0]!;\n            }\n            child.keyCount += 1;\n\n            this.keys[index] = right.keys[0]!;\n\n            remove(right.keys, right.keyCount, 0);\n            right.keyCount -= 1;\n            return;\n        }\n\n        // merge right into child\n        child.keys[child.keyCount] = this.keys[index]!;\n        child.keyCount += 1;\n        child.keys.set(right.keys.subarray(0, right.keyCount), child.keyCount);\n        if (this.height > 1) {\n            for (let i = 0; i <= right.keyCount; i++) {\n                child.children[child.keyCount + i] = right.children[i]!;\n            }\n        }\n        child.keyCount += right.keyCount;\n        remove(this.keys, this.keyCount, index);\n        this.children.splice(index + 1, 1);\n        this.keyCount -= 1;\n    }\n\n    protected deleteMax(): void {\n        if (this.height === 0) {\n            this.keyCount -= 1;\n            return;\n        }\n\n        const child = this.children[this.keyCount]!;\n        child.deleteMax();\n        this.balance(this.keyCount);\n    }\n\n    protected deleteAt(index: number) {\n        if (this.height === 0) {\n            remove(this.keys, this.keyCount, index);\n            this.keyCount -= 1;\n            return;\n        }\n\n        const max = this.children[index]!.max();\n        this.keys[index] = max;\n        this.children[index]!.deleteMax();\n        this.balance(index);\n    }\n\n    public *[Symbol.iterator](): Generator<number, void, void> {\n        if (this.height > 0) {\n            for (let i = 0; i < this.keyCount; i += 1) {\n                yield* this.children[i]!;\n                yield this.keys[i]!;\n            }\n            yield* this.children[this.keyCount]!;\n        } else {\n            for (let i = 0; i < this.keyCount; i += 1) {\n                yield this.keys[i]!;\n            }\n        }\n    }\n}\n\nexport class BTree {\n    order: number;\n    root: BTreeNode;\n\n    size: number = 0;\n\n    public constructor(order: number) {\n        this.order = order;\n        this.root = new BTreeNode(\n            order,\n            new Int32Array(order - 1),\n            0,\n            0,\n            new Array(order)\n        );\n    }\n\n    public has(value: number) {\n        // TODO(btree): benchmark this non-recursive version\n        let node = this.root;\n        while (true) {\n            const index = node.search(value);\n            if (index >= 0) {\n                return true;\n            }\n\n            node = node.children[~index]!;\n            if (!node) {\n                return false;\n            }\n        }\n    }\n\n    public add(value: number) {\n        const split = this.root.add(value);\n        if (typeof split === 'object') {\n            const keys = new Int32Array(this.order - 1);\n            keys[0] = split.key;\n\n            const children = new Array(this.order);\n            children[0] = this.root;\n            children[1] = split.child;\n\n            this.root = new BTreeNode(\n                this.order,\n                keys,\n                1,\n                this.root.height + 1,\n                children\n            );\n        }\n        if (split) {\n            this.size += 1;\n        }\n        return !!split;\n    }\n\n    public delete(value: number) {\n        const deleted = this.root.delete(value);\n        if (deleted) {\n            if (this.root.height > 0 && this.root.keyCount === 0) {\n                this.root = this.root.children[0]!;\n            }\n            this.size -= 1;\n        }\n        return deleted;\n    }\n\n    public clear() {\n        this.root.keyCount = 0;\n        this.root.height = 0;\n        // immediately release all references\n        this.root.children = new Array(this.order);\n        this.size = 0;\n    }\n\n    public [Symbol.iterator]() {\n        return this.root[Symbol.iterator]();\n    }\n}\n","import { Checkbox, ICommandBarItemProps, Stack, StackItem } from \"@fluentui/react\";\nimport { makeStyles, mergeClasses, shorthands } from \"@griffel/react\";\nimport { AndroidLogEntry, AndroidLogPriority, formatAndroidLogEntry, Logcat, LogcatFormat } from '@yume-chan/android-bin';\nimport { BTree } from '@yume-chan/b-tree';\nimport { AbortController, ReadableStream, WritableStream } from '@yume-chan/stream-extra';\nimport { action, autorun, makeAutoObservable, observable, runInAction } from \"mobx\";\nimport { observer } from \"mobx-react-lite\";\nimport { NextPage } from \"next\";\nimport Head from \"next/head\";\nimport { FormEvent, useEffect, useState } from 'react';\n\nimport { CommandBar, Grid, GridColumn, GridHeaderProps, GridRowProps } from \"../components\";\nimport { GlobalState } from \"../state\";\nimport { Icons, RouteStackProps, useStableCallback } from \"../utils\";\n\nconst LINE_HEIGHT = 32;\n\nconst useClasses = makeStyles({\n    grid: {\n        height: '100%',\n        marginLeft: '-16px',\n        marginRight: '-16px',\n    },\n    header: {\n        textAlign: 'center',\n        lineHeight: `${LINE_HEIGHT}px`,\n    },\n    row: {\n        '&:hover': {\n            backgroundColor: '#f3f2f1',\n        },\n    },\n    selected: {\n        backgroundColor: '#edebe9',\n    },\n    code: {\n        fontFamily: 'monospace',\n        textOverflow: 'ellipsis',\n        whiteSpace: 'nowrap',\n        lineHeight: LINE_HEIGHT + 'px',\n        cursor: 'default',\n        ...shorthands.overflow('hidden'),\n    },\n});\n\nexport interface Column extends GridColumn {\n    title: string;\n}\n\nexport interface LogRow extends AndroidLogEntry {\n    timeString?: string;\n}\n\nconst state = makeAutoObservable({\n    logcat: undefined as Logcat | undefined,\n    running: false,\n    buffer: [] as LogRow[],\n    flushRequested: false,\n    list: [] as LogRow[],\n    selection: new BTree(6),\n    count: 0,\n    stream: undefined as ReadableStream<AndroidLogEntry> | undefined,\n    stopSignal: undefined as AbortController | undefined,\n    selectedCount: 0,\n    animationFrameId: undefined as number | undefined,\n    start() {\n        if (this.running) {\n            return;\n        }\n\n        // Logcat always starts from beginning,\n        // so don't append.\n        this.list = [];\n\n        this.running = true;\n        this.stream = this.logcat!.binary();\n        this.stopSignal = new AbortController();\n        this.stream\n            .pipeTo(\n                new WritableStream({\n                    write: (chunk) => {\n                        this.buffer.push(chunk);\n                        if (!this.flushRequested) {\n                            this.flushRequested = true;\n                            requestAnimationFrame(this.flush);\n                        }\n                    },\n                }),\n                { signal: this.stopSignal.signal }\n            )\n            .catch(() => { });\n    },\n    flush() {\n        this.list.push(...this.buffer);\n        this.buffer = [];\n        this.flushRequested = false;\n    },\n    stop() {\n        this.running = false;\n        this.stopSignal!.abort();\n    },\n    clear() {\n        this.list = [];\n        this.selection.clear();\n        this.selectedCount = 0;\n    },\n    get empty() {\n        return this.list.length === 0;\n    },\n    get commandBar(): ICommandBarItemProps[] {\n        return [\n            this.running ? {\n                key: \"stop\",\n                text: \"Stop\",\n                iconProps: { iconName: Icons.Stop },\n                onClick: () => this.stop(),\n            } : {\n                key: \"start\",\n                text: \"Start\",\n                disabled: this.logcat === undefined,\n                iconProps: { iconName: Icons.Play },\n                onClick: () => this.start(),\n            },\n            {\n                key: 'clear',\n                text: 'Clear',\n                disabled: this.empty,\n                iconProps: { iconName: Icons.Delete },\n                onClick: () => this.clear(),\n            },\n            {\n                key: 'copyAll',\n                text: 'Copy Rows',\n                disabled: this.selectedCount === 0,\n                iconProps: { iconName: Icons.Copy },\n                onClick: () => {\n                    let text = '';\n                    for (const index of this.selection) {\n                        text += formatAndroidLogEntry(\n                            this.list[index],\n                            LogcatFormat.Brief\n                        ) + '\\n';\n                    }\n                    // Chrome on Windows can't copy null characters\n                    text = text.replace(/\\u0000/g, '');\n                    navigator.clipboard.writeText(text);\n                }\n            },\n            {\n                key: 'copyText',\n                text: 'Copy Messages',\n                disabled: this.selectedCount === 0,\n                iconProps: { iconName: Icons.Copy },\n                onClick: () => {\n                    let text = '';\n                    for (const index of this.selection) {\n                        text += this.list[index].message + '\\n';\n                    }\n                    // Chrome on Windows can't copy null characters\n                    text = text.replace(/\\u0000/g, '');\n                    navigator.clipboard.writeText(text);\n                }\n            }\n        ];\n    },\n    get columns(): Column[] {\n        return [\n            {\n                width: 40,\n                title: '',\n                CellComponent: ({ rowIndex, columnIndex, className, ...rest }) => {\n                    const [checked, setChecked] = useState(false);\n                    useEffect(() => {\n                        setChecked(this.selection.has(rowIndex));\n                    }, [rowIndex]);\n\n                    const handleChange = useStableCallback((e?: FormEvent<EventTarget>, checked?: boolean) => {\n                        if (checked === undefined) {\n                            return;\n                        }\n                        if (checked) {\n                            this.selection.add(rowIndex);\n                            setChecked(true);\n                        } else {\n                            this.selection.delete(rowIndex);\n                            setChecked(false);\n                        }\n                        runInAction(() => {\n                            // Trigger mobx\n                            this.selectedCount = this.selection.size;\n                        });\n                    });\n\n                    return (\n                        <Stack className={className} verticalAlign='center' horizontalAlign='center' {...rest}>\n                            <Checkbox checked={checked} onChange={handleChange} />\n                        </Stack>\n                    );\n                }\n            },\n            {\n                width: 200,\n                title: 'Time',\n                CellComponent: ({ rowIndex, columnIndex, className, ...rest }) => {\n                    const item = this.list[rowIndex];\n                    if (!item.timeString) {\n                        item.timeString = new Date(item.second * 1000).toISOString();\n                    }\n\n                    const classes = useClasses();\n\n                    return (\n                        <div className={mergeClasses(classes.code, className)} {...rest}>\n                            {item.timeString}\n                        </div>\n                    );\n                }\n            },\n            {\n                width: 60,\n                title: 'PID',\n                CellComponent: ({ rowIndex, columnIndex, className, ...rest }) => {\n                    const item = this.list[rowIndex];\n\n                    const classes = useClasses();\n\n                    return (\n                        <div className={mergeClasses(classes.code, className)} {...rest}>\n                            {item.pid}\n                        </div>\n                    );\n                }\n            },\n            {\n                width: 60,\n                title: 'TID',\n                CellComponent: ({ rowIndex, columnIndex, className, ...rest }) => {\n                    const item = this.list[rowIndex];\n\n                    const classes = useClasses();\n\n                    return (\n                        <div className={mergeClasses(classes.code, className)} {...rest}>\n                            {item.tid}\n                        </div>\n                    );\n                }\n            },\n            {\n                width: 80,\n                title: 'Priority',\n                CellComponent: ({ rowIndex, columnIndex, className, ...rest }) => {\n                    const item = this.list[rowIndex];\n\n                    const classes = useClasses();\n\n                    return (\n                        <div className={mergeClasses(classes.code, className)} {...rest}>\n                            {AndroidLogPriority[item.priority]}\n                        </div>\n                    );\n                }\n            },\n            {\n                width: 300,\n                title: 'Tag',\n                CellComponent: ({ rowIndex, columnIndex, className, ...rest }) => {\n                    const item = this.list[rowIndex];\n\n                    const classes = useClasses();\n\n                    return (\n                        <div className={mergeClasses(classes.code, className)} {...rest}>\n                            {item.tag}\n                        </div>\n                    );\n                }\n            },\n            {\n                width: 300,\n                flexGrow: 1,\n                title: 'Message',\n                CellComponent: ({ rowIndex, columnIndex, className, ...rest }) => {\n                    const item = this.list[rowIndex];\n                    const classes = useClasses();\n\n                    return (\n                        <div className={mergeClasses(classes.code, className)} {...rest}>\n                            {item.message}\n                        </div>\n                    );\n                }\n            },\n        ];\n    },\n}, {\n    buffer: false,\n    list: observable.shallow,\n    flush: action.bound,\n});\n\nautorun(() => {\n    if (GlobalState.device) {\n        runInAction(() => {\n            state.logcat = new Logcat(GlobalState.device!);\n        });\n    } else {\n        runInAction(() => {\n            state.logcat = undefined;\n            if (state.running) {\n                state.stop();\n            }\n        });\n    }\n});\n\nconst Header = observer(function Header({\n    className,\n    columnIndex,\n    ...rest\n}: GridHeaderProps) {\n    const classes = useClasses();\n\n    return (\n        <div className={mergeClasses(className, classes.header)} {...rest}>\n            {state.columns[columnIndex].title}\n        </div>\n    );\n});\n\nconst Row = function Row({\n    className,\n    rowIndex,\n    ...rest\n}: GridRowProps) {\n    const item = state.list[rowIndex];\n    const classes = useClasses();\n\n    const handleClick = useStableCallback(() => {\n        runInAction(() => {\n        });\n    });\n\n    return (\n        <div\n            className={mergeClasses(\n                className,\n                classes.row,\n            )}\n            onClick={handleClick}\n            {...rest}\n        />\n    );\n};\n\nconst LogcatPage: NextPage = () => {\n    const classes = useClasses();\n\n    return (\n        <Stack {...RouteStackProps}>\n            <Head>\n                <title>Logcat - Android Web Toolbox</title>\n            </Head>\n\n            <CommandBar items={state.commandBar} />\n\n            <StackItem grow>\n                <Grid\n                    className={classes.grid}\n                    rowCount={state.list.length}\n                    rowHeight={LINE_HEIGHT}\n                    columns={state.columns}\n                    HeaderComponent={Header}\n                    RowComponent={Row}\n                />\n            </StackItem>\n        </Stack>\n    );\n};\n\nexport default observer(LogcatPage);\n"],"names":["window","__NEXT_P","push","insert","array","length","value","index","set","subarray","remove","BTreeNode","order","mid","minKeyCount","keys","keyCount","height","children","this","split","child","middleKey","rightKeys","Int32Array","rightChildren","splice","Array","key","search","start","end","has","add","delete","deleteAt","deleted","balance","max","left","i","right","deleteMax","Symbol","iterator","BTree","root","size","node","clear","useClasses","makeStyles","grid","marginLeft","marginRight","header","textAlign","lineHeight","row","backgroundColor","selected","code","fontFamily","textOverflow","whiteSpace","LINE_HEIGHT","cursor","shorthands","state","makeAutoObservable","logcat","undefined","running","buffer","flushRequested","list","selection","count","stream","stopSignal","selectedCount","animationFrameId","binary","AbortController","pipeTo","WritableStream","write","chunk","requestAnimationFrame","flush","signal","catch","stop","abort","empty","commandBar","text","iconProps","iconName","Icons","onClick","disabled","formatAndroidLogEntry","LogcatFormat","replace","navigator","clipboard","writeText","message","columns","width","title","CellComponent","rowIndex","className","columnIndex","rest","useState","checked","setChecked","useEffect","handleChange","useStableCallback","e","runInAction","Stack","verticalAlign","horizontalAlign","Checkbox","onChange","item","timeString","Date","second","toISOString","classes","div","mergeClasses","pid","tid","AndroidLogPriority","priority","tag","flexGrow","observable","action","autorun","GlobalState","Logcat","Header","observer","Row","handleClick","RouteStackProps","Head","CommandBar","items","StackItem","grow","Grid","rowCount","rowHeight","HeaderComponent","RowComponent"],"sourceRoot":""}